"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateWrapManifest = void 0;
/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
var _1 = require(".");
var ajv_1 = __importDefault(require("ajv"));
var ajv = new ajv_1.default({ strict: false });
var schemas = {
    // NOTE: Patch fix for backwards compatability
    "0.1.0": _1.WrapManifestSchema_0_1,
    "0.1": _1.WrapManifestSchema_0_1,
};
function runValidation(schema, manifest) {
    var version = manifest.version;
    var validate = ajv.compile(schema);
    var valid = validate(manifest);
    if (!valid) {
        throw new Error(__spreadArray([
            "Validation errors encountered while sanitizing WrapManifest version ".concat(version)
        ], __read(validate.errors.map(function (x) { return JSON.stringify(x, null, 2); })), false).join("\n"));
    }
}
function validateWrapManifest(manifest, extSchema) {
    if (extSchema === void 0) { extSchema = undefined; }
    var schema = schemas[manifest.version];
    if (!schema) {
        throw new Error("Unrecognized WrapManifest schema version \"".concat(manifest.version, "\"\nmanifest: ").concat(JSON.stringify(manifest, null, 2)));
    }
    runValidation(schema, manifest);
    if (extSchema) {
        runValidation(extSchema, manifest);
    }
}
exports.validateWrapManifest = validateWrapManifest;
//# sourceMappingURL=validate.js.map