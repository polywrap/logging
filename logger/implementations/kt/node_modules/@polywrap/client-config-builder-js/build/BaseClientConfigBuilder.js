"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClientConfigBuilder = void 0;
var core_js_1 = require("@polywrap/core-js");
var BaseClientConfigBuilder = /** @class */ (function () {
    function BaseClientConfigBuilder() {
        this._config = {
            envs: {},
            interfaces: {},
            redirects: {},
            wrappers: {},
            packages: {},
            resolvers: [],
        };
    }
    Object.defineProperty(BaseClientConfigBuilder.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: false,
        configurable: true
    });
    BaseClientConfigBuilder.prototype.add = function (config) {
        var e_1, _a;
        if (config.envs) {
            this.addEnvs(config.envs);
        }
        if (config.redirects) {
            this.setRedirects(config.redirects);
        }
        if (config.wrappers) {
            this.setWrappers(config.wrappers);
        }
        if (config.packages) {
            this.setPackages(config.packages);
        }
        if (config.interfaces) {
            try {
                for (var _b = __values(Object.entries(config.interfaces)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), interfaceUri = _d[0], implementations = _d[1];
                    this.addInterfaceImplementations(interfaceUri, implementations);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (config.resolvers) {
            this.addResolvers(config.resolvers);
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.setWrapper = function (uri, wrapper) {
        this._config.wrappers[this.sanitizeUri(uri)] = wrapper;
        return this;
    };
    BaseClientConfigBuilder.prototype.setWrappers = function (uriWrappers) {
        for (var uri in uriWrappers) {
            this.setWrapper(this.sanitizeUri(uri), uriWrappers[uri]);
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.removeWrapper = function (uri) {
        delete this._config.wrappers[this.sanitizeUri(uri)];
        return this;
    };
    BaseClientConfigBuilder.prototype.setPackage = function (uri, wrapPackage) {
        this._config.packages[this.sanitizeUri(uri)] = wrapPackage;
        return this;
    };
    BaseClientConfigBuilder.prototype.setPackages = function (uriPackages) {
        for (var uri in uriPackages) {
            this.setPackage(this.sanitizeUri(uri), uriPackages[uri]);
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.removePackage = function (uri) {
        delete this._config.packages[this.sanitizeUri(uri)];
        return this;
    };
    BaseClientConfigBuilder.prototype.addEnv = function (uri, env) {
        var sanitizedUri = this.sanitizeUri(uri);
        this._config.envs[sanitizedUri] = __assign(__assign({}, this._config.envs[sanitizedUri]), env);
        return this;
    };
    BaseClientConfigBuilder.prototype.addEnvs = function (envs) {
        var e_2, _a;
        try {
            for (var _b = __values(Object.entries(envs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), uri = _d[0], env = _d[1];
                this.addEnv(this.sanitizeUri(uri), env);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.removeEnv = function (uri) {
        delete this._config.envs[this.sanitizeUri(uri)];
        return this;
    };
    BaseClientConfigBuilder.prototype.setEnv = function (uri, env) {
        this._config.envs[this.sanitizeUri(uri)] = env;
        return this;
    };
    BaseClientConfigBuilder.prototype.addInterfaceImplementation = function (interfaceUri, implementationUri) {
        var existingInterface = this._config.interfaces[this.sanitizeUri(interfaceUri)];
        if (existingInterface) {
            existingInterface.add(this.sanitizeUri(implementationUri));
        }
        else {
            this._config.interfaces[this.sanitizeUri(interfaceUri)] = new Set([
                this.sanitizeUri(implementationUri),
            ]);
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.addInterfaceImplementations = function (interfaceUri, implementationUris) {
        var e_3, _a;
        var _this = this;
        var existingInterface = this._config.interfaces[this.sanitizeUri(interfaceUri)];
        if (existingInterface) {
            try {
                for (var implementationUris_1 = __values(implementationUris), implementationUris_1_1 = implementationUris_1.next(); !implementationUris_1_1.done; implementationUris_1_1 = implementationUris_1.next()) {
                    var implementationUri = implementationUris_1_1.value;
                    existingInterface.add(this.sanitizeUri(implementationUri));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (implementationUris_1_1 && !implementationUris_1_1.done && (_a = implementationUris_1.return)) _a.call(implementationUris_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else {
            var sanitizedImplUris = __spreadArray([], __read(implementationUris), false).map(function (x) {
                return _this.sanitizeUri(x);
            });
            this._config.interfaces[this.sanitizeUri(interfaceUri)] = new Set(sanitizedImplUris);
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.removeInterfaceImplementation = function (interfaceUri, implementationUri) {
        var existingInterface = this._config.interfaces[this.sanitizeUri(interfaceUri)];
        if (!existingInterface)
            return this;
        existingInterface.delete(this.sanitizeUri(implementationUri));
        if (existingInterface.size == 0) {
            delete this.config.interfaces[this.sanitizeUri(interfaceUri)];
        }
        if (existingInterface.size == 0) {
            delete this._config.interfaces[interfaceUri];
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.setRedirect = function (from, to) {
        this._config.redirects[this.sanitizeUri(from)] = this.sanitizeUri(to);
        return this;
    };
    BaseClientConfigBuilder.prototype.setRedirects = function (redirects) {
        for (var uri in redirects) {
            this.setRedirect(this.sanitizeUri(uri), this.sanitizeUri(redirects[uri]));
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.removeRedirect = function (from) {
        delete this._config.redirects[this.sanitizeUri(from)];
        return this;
    };
    BaseClientConfigBuilder.prototype.addResolver = function (resolver) {
        this._config.resolvers.push(resolver);
        return this;
    };
    BaseClientConfigBuilder.prototype.addResolvers = function (resolvers) {
        var e_4, _a;
        try {
            for (var resolvers_1 = __values(resolvers), resolvers_1_1 = resolvers_1.next(); !resolvers_1_1.done; resolvers_1_1 = resolvers_1.next()) {
                var resolver = resolvers_1_1.value;
                this.addResolver(resolver);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (resolvers_1_1 && !resolvers_1_1.done && (_a = resolvers_1.return)) _a.call(resolvers_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return this;
    };
    BaseClientConfigBuilder.prototype.sanitizeUri = function (uri) {
        return core_js_1.Uri.from(uri).uri;
    };
    return BaseClientConfigBuilder;
}());
exports.BaseClientConfigBuilder = BaseClientConfigBuilder;
//# sourceMappingURL=BaseClientConfigBuilder.js.map