import { BuilderConfig, ClientConfigBuilder } from "./types";
import { BundleName } from "./bundles";
import { CoreClientConfig, Wrapper, IWrapPackage } from "@polywrap/core-js";
import { UriResolverLike } from "@polywrap/uri-resolvers-js";
export declare abstract class BaseClientConfigBuilder implements ClientConfigBuilder {
    protected _config: BuilderConfig;
    abstract addDefaults(): ClientConfigBuilder;
    abstract addBundle(bundle: BundleName): ClientConfigBuilder;
    abstract build(): CoreClientConfig;
    get config(): BuilderConfig;
    add(config: Partial<BuilderConfig>): ClientConfigBuilder;
    setWrapper(uri: string, wrapper: Wrapper): ClientConfigBuilder;
    setWrappers(uriWrappers: Record<string, Wrapper>): ClientConfigBuilder;
    removeWrapper(uri: string): ClientConfigBuilder;
    setPackage(uri: string, wrapPackage: IWrapPackage): ClientConfigBuilder;
    setPackages(uriPackages: Record<string, IWrapPackage>): ClientConfigBuilder;
    removePackage(uri: string): ClientConfigBuilder;
    addEnv(uri: string, env: Record<string, unknown>): ClientConfigBuilder;
    addEnvs(envs: Record<string, Record<string, unknown>>): ClientConfigBuilder;
    removeEnv(uri: string): ClientConfigBuilder;
    setEnv(uri: string, env: Record<string, unknown>): ClientConfigBuilder;
    addInterfaceImplementation(interfaceUri: string, implementationUri: string): ClientConfigBuilder;
    addInterfaceImplementations(interfaceUri: string, implementationUris: Array<string> | Set<string>): ClientConfigBuilder;
    removeInterfaceImplementation(interfaceUri: string, implementationUri: string): ClientConfigBuilder;
    setRedirect(from: string, to: string): ClientConfigBuilder;
    setRedirects(redirects: Record<string, string>): ClientConfigBuilder;
    removeRedirect(from: string): ClientConfigBuilder;
    addResolver(resolver: UriResolverLike): ClientConfigBuilder;
    addResolvers(resolvers: UriResolverLike[]): ClientConfigBuilder;
    private sanitizeUri;
}
