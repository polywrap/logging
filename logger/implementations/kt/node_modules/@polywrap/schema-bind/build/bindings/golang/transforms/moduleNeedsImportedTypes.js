"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.needsImportedNamespaces = exports.extractNeededImportedNamespaces = exports.extractImportedTypes = void 0;
function extractImportedTypes() {
    var state = {
        importedTypes: new Map(),
    };
    return {
        enter: {
            ImportedEnumDefinition: function (def) {
                state.importedTypes = state.importedTypes.set(def.type, def.namespace);
                return def;
            },
            ImportedEnvDefinition: function (def) {
                state.importedTypes = state.importedTypes.set(def.type, def.namespace);
                return def;
            },
            ImportedModuleDefinition: function (def) {
                state.importedTypes = state.importedTypes.set(def.type, def.namespace);
                return def;
            },
            ImportedObjectDefinition: function (def) {
                state.importedTypes = state.importedTypes.set(def.type, def.namespace);
                return def;
            },
        },
        leave: {
            Abi: function (abi) {
                return __assign(__assign({}, abi), { _importedTypes: state.importedTypes });
            },
        },
    };
}
exports.extractImportedTypes = extractImportedTypes;
function extractNeededImportedNamespaces() {
    var state = {
        importedTypes: new Map(),
        needsImportedNamespaces: new Set(),
    };
    return {
        enter: {
            Abi: function (abi) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                state.importedTypes = abi._importedTypes;
                return abi;
            },
            MethodDefinition: function (def) {
                var e_1, _a;
                var _b, _c, _d, _e;
                if (def.arguments && def.arguments.length > 0) {
                    try {
                        for (var _f = __values(def.arguments), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var arg = _g.value;
                            var argType = arg.type;
                            var importNamespace = (_b = state.importedTypes) === null || _b === void 0 ? void 0 : _b.get(argType);
                            if (importNamespace) {
                                (_c = state.needsImportedNamespaces) === null || _c === void 0 ? void 0 : _c.add(importNamespace);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                if (def.return) {
                    var returnType = def.return.type;
                    var importNamespace = (_d = state.importedTypes) === null || _d === void 0 ? void 0 : _d.get(returnType);
                    if (importNamespace) {
                        (_e = state.needsImportedNamespaces) === null || _e === void 0 ? void 0 : _e.add(importNamespace);
                    }
                }
                return def;
            },
        },
        leave: {
            Abi: function (abi) {
                return __assign(__assign({}, abi), { _needsImportedNamespaces: state.needsImportedNamespaces });
            },
        },
    };
}
exports.extractNeededImportedNamespaces = extractNeededImportedNamespaces;
function needsImportedNamespaces() {
    var state = {
        importedTypes: new Map(),
        needsImportedNamespaces: new Set(),
    };
    return {
        enter: {
            Abi: function (abi) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                state.needsImportedNamespaces = abi._needsImportedNamespaces;
                return abi;
            },
        },
        leave: {
            ModuleDefinition: function (def) {
                var needsImportedNamespaces = Array.from(state.needsImportedNamespaces);
                return __assign(__assign({}, def), { needsImportedNamespaces: needsImportedNamespaces });
            },
        },
    };
}
exports.needsImportedNamespaces = needsImportedNamespaces;
//# sourceMappingURL=moduleNeedsImportedTypes.js.map