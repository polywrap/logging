package {{#pkgName}}{{#toSnakeCase}}{{namespace}}{{/toSnakeCase}}{{/pkgName}}

type {{#toUpper}}{{type}}{{/toUpper}} int32

const (
{{#stuctProps}}
{{#constants}}
{{#toUpper}}{{type}}{{/toUpper}}{{.}} = iota
{{/constants}}
{{#toFirstLower}}{{type}}{{/toFirstLower}}Max = iota
{{/stuctProps}}
)

func Sanitize{{#toUpper}}{{type}}{{/toUpper}}Value(value int32) {
	if !(value >= 0 && value < int32({{#toFirstLower}}{{type}}{{/toFirstLower}}Max)) {
		panic("Invalid value for enum '{{#toUpper}}{{type}}{{/toUpper}}'")
	}
}

func Get{{#toUpper}}{{type}}{{/toUpper}}Value(key string) {{#toUpper}}{{type}}{{/toUpper}} {
	switch key {
	{{#constants}}
	case "{{.}}":
		return {{#toUpper}}{{type}}{{/toUpper}}{{.}}
	{{/constants}}
	default:
		panic("Invalid key for enum '{{#toUpper}}{{type}}{{/toUpper}}'")
	}
}

func Get{{#toUpper}}{{type}}{{/toUpper}}Key(value {{#toUpper}}{{type}}{{/toUpper}}) string {
	Sanitize{{#toUpper}}{{type}}{{/toUpper}}Value(int32(value))
	switch value {
	{{#constants}}
	case {{#toUpper}}{{type}}{{/toUpper}}{{.}}:
		return "{{.}}"
	{{/constants}}
	default:
		panic("Invalid value for enum '{{#toUpper}}{{type}}{{/toUpper}}'")
	}
}
