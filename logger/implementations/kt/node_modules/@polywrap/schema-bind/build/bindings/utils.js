"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSubTemplates = exports.renderTemplates = void 0;
var os_js_1 = require("@polywrap/os-js");
var mustache_1 = __importDefault(require("mustache"));
var path_1 = __importDefault(require("path"));
function transformName(str, view) {
    str = str.replace("-", ".");
    if (!str.endsWith(".go")) {
        return str;
    }
    var def = view;
    str = str
        .replace("%type%", def.type)
        .replace(/([A-Z])/g, "_$1")
        .toLowerCase();
    return str.startsWith("_") ? str.slice(1) : str;
}
function renderTemplates(templateDirAbs, view, subTemplates, subDirectories) {
    if (subDirectories === void 0) { subDirectories = false; }
    var output = [];
    var directory = (0, os_js_1.readDirectorySync)(templateDirAbs);
    var processDirectory = function (entries, output) {
        var e_1, _a;
        subTemplates = loadSubTemplates(entries, subTemplates);
        try {
            // Generate all files, recurse all directories
            for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var dirent = entries_1_1.value;
                if (dirent.type === "File") {
                    var name_1 = path_1.default.parse(dirent.name).name;
                    // file templates don't start with '$'
                    if (!name_1.startsWith("$")) {
                        var data = mustache_1.default.render(dirent.data, view, subTemplates);
                        // If the file isn't empty, add it to the output
                        if (data) {
                            output.push({
                                type: "File",
                                name: transformName(name_1, view),
                                data: data,
                            });
                        }
                    }
                }
                else if (dirent.type === "Directory" && subDirectories) {
                    var subOutput = [];
                    processDirectory(dirent.data, subOutput);
                    output.push({
                        type: "Directory",
                        name: dirent.name,
                        data: subOutput,
                    });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    processDirectory(directory.entries, output);
    return output;
}
exports.renderTemplates = renderTemplates;
function loadSubTemplates(entries, existingSubTemplates) {
    var e_2, _a;
    var subTemplates = existingSubTemplates
        ? existingSubTemplates
        : {};
    try {
        for (var entries_2 = __values(entries), entries_2_1 = entries_2.next(); !entries_2_1.done; entries_2_1 = entries_2.next()) {
            var file = entries_2_1.value;
            if (file.type !== "File") {
                continue;
            }
            var name_2 = path_1.default.parse(file.name).name;
            // sub-templates start with '$' in their file names
            if (name_2.startsWith("$")) {
                // remove the $ from the name
                var subTemplateName = name_2.substring(1);
                subTemplates[subTemplateName] = file.data;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return subTemplates;
}
exports.loadSubTemplates = loadSubTemplates;
//# sourceMappingURL=utils.js.map