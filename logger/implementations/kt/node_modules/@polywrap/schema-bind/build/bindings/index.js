"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenerateBindingFn = exports.Golang = void 0;
var WrapBindgen = __importStar(require("./wrap-bindgen"));
var Golang = __importStar(require("./golang"));
exports.Golang = Golang;
__exportStar(require("./types"), exports);
__exportStar(require("./utils"), exports);
function getGenerateBindingFn(bindLanguage) {
    switch (bindLanguage) {
        case "wrap-as":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/wrap-assemblyscript");
        case "wrap-rs":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/wrap-rust");
        case "wrap-go":
            return Golang.Wasm.generateBinding;
        case "plugin-ts":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/plugin-typescript");
        case "plugin-rs":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/plugin-rust");
        case "plugin-py":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/plugin-python");
        case "plugin-kt":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/plugin-kotlin");
        case "plugin-swift":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/plugin-swift");
        case "app-ts":
            return WrapBindgen.getGenerateBindingFn("https://github.com/polywrap/wrap-abi-bindgen/tree/wrap-0.1/implementations/app-typescript");
        default:
            throw Error("Error: Language binding unsupported - ".concat(bindLanguage));
    }
}
exports.getGenerateBindingFn = getGenerateBindingFn;
//# sourceMappingURL=index.js.map