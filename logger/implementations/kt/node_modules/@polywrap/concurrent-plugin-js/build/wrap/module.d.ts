import * as Types from "./types";
import { CoreClient, MaybeAsync } from "@polywrap/core-js";
import { PluginModule } from "@polywrap/plugin-js";
export interface Args_result {
    taskIds: Array<Types.Int>;
    returnWhen: Types.ReturnWhen;
}
export interface Args_status {
    taskIds: Array<Types.Int>;
}
export interface Args_schedule {
    tasks: Array<Types.Task>;
}
export interface Args_abort {
    taskIds: Array<Types.String>;
}
export declare abstract class Module<TConfig> extends PluginModule<TConfig> {
    abstract result(args: Args_result, client: CoreClient, env?: null): MaybeAsync<Array<Types.TaskResult>>;
    abstract status(args: Args_status, client: CoreClient, env?: null): MaybeAsync<Array<Types.TaskStatus>>;
    abstract schedule(args: Args_schedule, client: CoreClient, env?: null): MaybeAsync<Array<Types.Int>>;
    abstract abort(args: Args_abort, client: CoreClient, env?: null): MaybeAsync<Array<Types.Boolean>>;
}
