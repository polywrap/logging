import * as Types from "./";
export type UInt = number;
export type UInt8 = number;
export type UInt16 = number;
export type UInt32 = number;
export type Int = number;
export type Int8 = number;
export type Int16 = number;
export type Int32 = number;
export type Bytes = Uint8Array;
export type BigInt = string;
export type BigNumber = string;
export type Json = string;
export type String = string;
export type Boolean = boolean;
export interface Task {
    uri: Types.String;
    method: Types.String;
    args: Types.Bytes;
}
export interface TaskResult {
    taskId: Types.Int;
    result?: Types.Bytes | null;
    error?: Types.String | null;
    status: Types.TaskStatus;
}
export declare enum TaskStatusEnum {
    PENDING = 0,
    RUNNING = 1,
    COMPLETED = 2,
    CANCELLED = 3,
    FAILED = 4
}
export type TaskStatusString = "PENDING" | "RUNNING" | "COMPLETED" | "CANCELLED" | "FAILED";
export type TaskStatus = TaskStatusEnum | TaskStatusString;
export declare enum ReturnWhenEnum {
    FIRST_COMPLETED = 0,
    ANY_COMPLETED = 1,
    ALL_COMPLETED = 2
}
export type ReturnWhenString = "FIRST_COMPLETED" | "ANY_COMPLETED" | "ALL_COMPLETED";
export type ReturnWhen = ReturnWhenEnum | ReturnWhenString;
