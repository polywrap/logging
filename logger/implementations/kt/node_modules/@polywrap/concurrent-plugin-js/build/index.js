"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.concurrentPromisePlugin = exports.ConcurrentPromisePlugin = void 0;
var core_js_1 = require("@polywrap/core-js");
var plugin_js_1 = require("@polywrap/plugin-js");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var wrap_1 = require("./wrap");
var ConcurrentPromisePlugin = /** @class */ (function (_super) {
    __extends(ConcurrentPromisePlugin, _super);
    function ConcurrentPromisePlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._totalTasks = 0;
        _this._tasks = {};
        _this._status = {};
        return _this;
    }
    ConcurrentPromisePlugin.prototype.result = function (input, client) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, result, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = input.returnWhen;
                        switch (_a) {
                            case wrap_1.ReturnWhenEnum.FIRST_COMPLETED: return [3 /*break*/, 1];
                            case wrap_1.ReturnWhenEnum.ALL_COMPLETED: return [3 /*break*/, 3];
                            case wrap_1.ReturnWhenEnum.ANY_COMPLETED: return [3 /*break*/, 5];
                        }
                        return [3 /*break*/, 7];
                    case 1: return [4 /*yield*/, Promise.race(input.taskIds.map(function (id) { return _this.resolveTask(id); }))];
                    case 2:
                        result = _b.sent();
                        return [2 /*return*/, [result]];
                    case 3: return [4 /*yield*/, Promise.all(input.taskIds.map(function (id) { return _this.resolveTask(id); }))];
                    case 4: return [2 /*return*/, _b.sent()];
                    case 5: return [4 /*yield*/, Promise.any(input.taskIds.map(function (id) { return _this.resolveTask(id)
                            .then(function (result) {
                            if (result.error) {
                                return Promise.reject(result.error);
                            }
                            return result;
                        }); })).catch(function (err) { return input.taskIds.map(function (id, idx) { return ({
                            taskId: id,
                            result: undefined,
                            error: err.errors[idx],
                            status: wrap_1.TaskStatusEnum.FAILED,
                        }); }); })];
                    case 6:
                        result = _b.sent();
                        return [2 /*return*/, Array.isArray(result) ? result : [result]];
                    case 7: throw new Error("Invalid value of ReturnWhen enum: " + input.returnWhen);
                }
            });
        });
    };
    ConcurrentPromisePlugin.prototype.status = function (input, client) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, input.taskIds.map(function (id) { return _this._status[id]; })];
            });
        });
    };
    ConcurrentPromisePlugin.prototype.schedule = function (input, client) {
        var _this = this;
        return input.tasks.map(function (task) {
            return _this.scheduleTask(__assign({}, task), client);
        });
    };
    ConcurrentPromisePlugin.prototype.abort = function (args, client) {
        return args.taskIds.map(function (_id) { return false; });
    };
    ConcurrentPromisePlugin.prototype.scheduleTask = function (task, client) {
        this._tasks[this._totalTasks] = client.invoke({
            uri: core_js_1.Uri.from(task.uri),
            method: task.method,
            args: task.args,
        });
        this._status[this._totalTasks] = wrap_1.TaskStatusEnum.RUNNING;
        return this._totalTasks++;
    };
    ConcurrentPromisePlugin.prototype.resolveTask = function (taskId) {
        var _this = this;
        return this._tasks[taskId]
            .then(function (result) {
            var _a, _b;
            _this._status[taskId] = wrap_1.TaskStatusEnum.COMPLETED;
            if (!result.ok) {
                return {
                    taskId: taskId,
                    result: undefined,
                    error: (_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : "Unknown error occurred in concurrent task ".concat(taskId),
                    status: wrap_1.TaskStatusEnum.FAILED,
                };
            }
            return {
                taskId: taskId,
                result: new Uint8Array((0, msgpack_js_1.msgpackEncode)(result.value)),
                error: undefined,
                status: wrap_1.TaskStatusEnum.COMPLETED,
            };
        })
            .catch(function (err) {
            var _a;
            _this._status[taskId] = wrap_1.TaskStatusEnum.FAILED;
            return {
                taskId: taskId,
                result: undefined,
                error: (_a = err.message) !== null && _a !== void 0 ? _a : "Unknown error occurred in concurrent task ".concat(taskId),
                status: wrap_1.TaskStatusEnum.FAILED,
            };
        });
    };
    return ConcurrentPromisePlugin;
}(wrap_1.Module));
exports.ConcurrentPromisePlugin = ConcurrentPromisePlugin;
var concurrentPromisePlugin = function () {
    return new plugin_js_1.PluginPackage(new ConcurrentPromisePlugin({}), wrap_1.manifest);
};
exports.concurrentPromisePlugin = concurrentPromisePlugin;
exports.plugin = exports.concurrentPromisePlugin;
//# sourceMappingURL=index.js.map