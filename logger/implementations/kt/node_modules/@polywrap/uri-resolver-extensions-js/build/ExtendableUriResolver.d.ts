import { Uri, CoreClient, IUriResolver, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
import { UriResolverAggregatorBase } from "@polywrap/uri-resolvers-js";
/**
 * A Uri Resolver that delegates resolution to wrappers implementing the
 * URI Resolver Extension Interface.
 * */
export declare class ExtendableUriResolver extends UriResolverAggregatorBase<Error, Error> {
    /** The supported interface URIs to which resolver-ext implementations should be registered */
    static defaultExtInterfaceUris: Uri[];
    /** The active interface URIs to which implementations should be registered */
    readonly extInterfaceUris: Uri[];
    private readonly _resolverName;
    /**
     * Create an ExtendableUriResolver
     *
     * @param extInterfaceUris - URI Resolver Interface URIs
     * @param resolverName - Name to use in resolution history output
     * */
    constructor(extInterfaceUris?: Uri[], resolverName?: string);
    /**
     * Get a list of URI Resolvers
     *
     * @param uri - the URI to query for resolvers
     * @param client - a CoreClient instance that can be used to make an invocation
     * @param resolutionContext - the current URI resolution context
     *
     * @returns a list of IUriResolver or an error
     * */
    getUriResolvers(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<IUriResolver<unknown>[], Error>>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Attempts resolution with each the URI Resolver Extension wrappers sequentially.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, Error>>;
    /**
     * A utility function for generating step descriptions to facilitate resolution context updates
     *
     * @returns text describing the URI resolution step
     * */
    protected getStepDescription: () => string;
}
