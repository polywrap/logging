"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendableUriResolver = void 0;
var UriResolverWrapper_1 = require("./UriResolverWrapper");
var core_js_1 = require("@polywrap/core-js");
var result_1 = require("@polywrap/result");
var uri_resolvers_js_1 = require("@polywrap/uri-resolvers-js");
// $start: ExtendableUriResolver
/**
 * A Uri Resolver that delegates resolution to wrappers implementing the
 * URI Resolver Extension Interface.
 * */
var ExtendableUriResolver = /** @class */ (function (_super) {
    __extends(ExtendableUriResolver, _super); /* $ */
    // $start: ExtendableUriResolver-constructor
    /**
     * Create an ExtendableUriResolver
     *
     * @param extInterfaceUris - URI Resolver Interface URIs
     * @param resolverName - Name to use in resolution history output
     * */
    function ExtendableUriResolver(extInterfaceUris, resolverName) {
        if (extInterfaceUris === void 0) { extInterfaceUris = ExtendableUriResolver.defaultExtInterfaceUris; }
        if (resolverName === void 0) { resolverName = "ExtendableUriResolver"; }
        var _this = _super.call(this) || this;
        // $start: ExtendableUriResolver-getStepDescription
        /**
         * A utility function for generating step descriptions to facilitate resolution context updates
         *
         * @returns text describing the URI resolution step
         * */
        _this.getStepDescription = function () { return "".concat(_this._resolverName); };
        _this.extInterfaceUris = extInterfaceUris;
        _this._resolverName = resolverName;
        return _this;
    }
    // $start: ExtendableUriResolver-getUriResolvers
    /**
     * Get a list of URI Resolvers
     *
     * @param uri - the URI to query for resolvers
     * @param client - a CoreClient instance that can be used to make an invocation
     * @param resolutionContext - the current URI resolution context
     *
     * @returns a list of IUriResolver or an error
     * */
    ExtendableUriResolver.prototype.getUriResolvers = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var uriResolverImpls, _a, _b, extInterfaceUri, getImplementationsResult, e_1_1, resolvers;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        uriResolverImpls = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(this.extInterfaceUris), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        extInterfaceUri = _b.value;
                        return [4 /*yield*/, client.getImplementations(extInterfaceUri, {
                                resolutionContext: resolutionContext.createSubContext(),
                            })];
                    case 3:
                        getImplementationsResult = _d.sent();
                        if (!getImplementationsResult.ok) {
                            return [2 /*return*/, (0, result_1.ResultErr)(getImplementationsResult.error)];
                        }
                        uriResolverImpls.push.apply(uriResolverImpls, __spreadArray([], __read(getImplementationsResult.value), false));
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        resolvers = uriResolverImpls
                            .filter(function (x) { return !resolutionContext.isResolving(x); })
                            .map(function (implementationUri) { return new UriResolverWrapper_1.UriResolverWrapper(implementationUri); });
                        return [2 /*return*/, (0, result_1.ResultOk)(resolvers)];
                }
            });
        });
    };
    // $start: ExtendableUriResolver-tryResolverUri
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Attempts resolution with each the URI Resolver Extension wrappers sequentially.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    ExtendableUriResolver.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var result, resolvers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUriResolvers(uri, client, resolutionContext)];
                    case 1:
                        result = _a.sent();
                        if (!result.ok) {
                            return [2 /*return*/, core_js_1.UriResolutionResult.err(result.error)];
                        }
                        resolvers = result.value;
                        if (resolvers.length === 0) {
                            return [2 /*return*/, core_js_1.UriResolutionResult.ok(uri)];
                        }
                        return [4 /*yield*/, _super.prototype.tryResolveUriWithResolvers.call(this, uri, client, resolvers, resolutionContext)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // $start: ExtendableUriResolver-extInterfaceUri-static
    /** The supported interface URIs to which resolver-ext implementations should be registered */
    ExtendableUriResolver.defaultExtInterfaceUris = [
        core_js_1.Uri.from("wrapscan.io/polywrap/uri-resolver@1.0"),
    ];
    return ExtendableUriResolver;
}(uri_resolvers_js_1.UriResolverAggregatorBase));
exports.ExtendableUriResolver = ExtendableUriResolver;
//# sourceMappingURL=ExtendableUriResolver.js.map