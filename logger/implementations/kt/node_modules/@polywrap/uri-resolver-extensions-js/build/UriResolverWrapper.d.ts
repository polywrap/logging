import { Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper, IUriResolver } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/**
 * An IUriResolver that delegates resolution to a wrapper that implements
 * the URI Resolver Extension Interface
 * */
export declare class UriResolverWrapper implements IUriResolver<unknown> {
    readonly implementationUri: Uri;
    /**
     * construct a UriResolverWrapper
     *
     * @param implementationUri - URI that resolves to a URI Resolver Extension implementation
     * */
    constructor(implementationUri: Uri);
    /**
     * Attempt to resolve a URI by invoking a URI Resolver Extension wrapper, then
     * parse the result to a wrap package, a wrapper, or a URI
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, unknown>>;
}
