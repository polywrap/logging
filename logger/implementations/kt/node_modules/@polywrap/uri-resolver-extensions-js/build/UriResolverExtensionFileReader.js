"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriResolverExtensionFileReader = void 0;
var core_js_1 = require("@polywrap/core-js");
var result_1 = require("@polywrap/result");
// $start: UriResolverExtensionFileReader
/** An IFileReader that reads files by invoking URI Resolver Extension wrappers */
var UriResolverExtensionFileReader = /** @class */ (function () {
    // $start: UriResolverExtensionFileReader-constructor
    /**
     * Construct a UriResolverExtensionFileReader
     *
     * @param _resolverExtensionUri - URI of the URI Resolver Extension wrapper
     * @param _wrapperUri - URI of the wrap package to read from
     * @param _client - A CoreClient instance
     * */
    function UriResolverExtensionFileReader(_resolverExtensionUri, _wrapperUri, _client) {
        this._resolverExtensionUri = _resolverExtensionUri;
        this._wrapperUri = _wrapperUri;
        this._client = _client;
        this._fileCache = new Map();
    }
    // $start: UriResolverExtensionFileReader-readFile
    /**
     * Read a file
     *
     * @param filePath - the file's path from the wrap package root
     *
     * @returns a Result containing a buffer if successful, or an error
     * */
    UriResolverExtensionFileReader.prototype.readFile = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var path, existingFile, getFileRequest;
            var _this = this;
            return __generator(this, function (_a) {
                path = (0, core_js_1.combinePaths)(this._wrapperUri.path, filePath);
                existingFile = this._fileCache.get(path);
                if (existingFile) {
                    return [2 /*return*/, existingFile];
                }
                getFileRequest = new Promise(function (resolve) {
                    return core_js_1.UriResolverInterface.module
                        .getFile({
                        invoke: function (options) {
                            return _this._client.invoke(options);
                        },
                        invokeWrapper: function (options) {
                            return _this._client.invokeWrapper(options);
                        },
                    }, _this._resolverExtensionUri, path)
                        .then(function (result) {
                        if (!result.ok) {
                            // The UriResolver has encountered an error,
                            // return the error & reset the file cache (enabling retries).
                            _this._fileCache.delete(path);
                            resolve(result);
                        }
                        else if (!result.value) {
                            // The UriResolver did not find the file @ the provided URI.
                            resolve((0, result_1.ResultErr)(new Error("File not found at ".concat(path, " using resolver ").concat(_this._resolverExtensionUri.uri))));
                        }
                        else {
                            // The file has been found.
                            resolve({
                                value: result.value,
                                ok: true,
                            });
                        }
                    });
                });
                this._fileCache.set(path, getFileRequest);
                return [2 /*return*/, getFileRequest];
            });
        });
    };
    return UriResolverExtensionFileReader;
}());
exports.UriResolverExtensionFileReader = UriResolverExtensionFileReader;
//# sourceMappingURL=UriResolverExtensionFileReader.js.map