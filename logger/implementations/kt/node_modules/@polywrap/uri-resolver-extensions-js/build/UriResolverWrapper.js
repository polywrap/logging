"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriResolverWrapper = void 0;
var UriResolverExtensionFileReader_1 = require("./UriResolverExtensionFileReader");
var core_js_1 = require("@polywrap/core-js");
var result_1 = require("@polywrap/result");
var wasm_js_1 = require("@polywrap/wasm-js");
// $start: UriResolverWrapper
/**
 * An IUriResolver that delegates resolution to a wrapper that implements
 * the URI Resolver Extension Interface
 * */
var UriResolverWrapper = /** @class */ (function () {
    // $start: UriResolverWrapper-constructor
    /**
     * construct a UriResolverWrapper
     *
     * @param implementationUri - URI that resolves to a URI Resolver Extension implementation
     * */
    function UriResolverWrapper(implementationUri) {
        this.implementationUri = implementationUri;
    }
    // $start: UriResolverWrapper-tryResolverUri
    /**
     * Attempt to resolve a URI by invoking a URI Resolver Extension wrapper, then
     * parse the result to a wrap package, a wrapper, or a URI
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    UriResolverWrapper.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverExtensionContext, result, resolutionResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resolverExtensionContext = resolutionContext.createSubContext();
                        return [4 /*yield*/, tryResolveUriWithImplementation(uri, this.implementationUri, client, resolverExtensionContext)];
                    case 1:
                        result = _a.sent();
                        resolutionResult = result.ok
                            ? getResult(result.value, uri, this.implementationUri, client)
                            : core_js_1.UriResolutionResult.err(result.error);
                        resolutionContext.trackStep({
                            sourceUri: uri,
                            result: resolutionResult,
                            description: "ResolverExtension (".concat(this.implementationUri.uri, ")"),
                            subHistory: resolverExtensionContext.getHistory(),
                        });
                        return [2 /*return*/, resolutionResult];
                }
            });
        });
    };
    return UriResolverWrapper;
}());
exports.UriResolverWrapper = UriResolverWrapper;
var getResult = function (uriOrManifest, uri, implementationUri, client) {
    if (uriOrManifest === null || uriOrManifest === void 0 ? void 0 : uriOrManifest.uri) {
        return core_js_1.UriResolutionResult.ok(new core_js_1.Uri(uriOrManifest.uri));
    }
    else if (uriOrManifest === null || uriOrManifest === void 0 ? void 0 : uriOrManifest.manifest) {
        var wrapPackage = wasm_js_1.WasmPackage.from(uriOrManifest.manifest, new UriResolverExtensionFileReader_1.UriResolverExtensionFileReader(implementationUri, uri, client));
        return core_js_1.UriResolutionResult.ok(uri, wrapPackage);
    }
    return core_js_1.UriResolutionResult.ok(uri);
};
// $start: UriResolverWrapper-tryResolveUriWithImplementation
/**
 * Attempt to resolve a URI by invoking a URI Resolver Extension wrapper
 *
 * @param uri - the URI to resolve
 * @param implementationUri - URI that resolves to a URI Resolver Extension implementation
 * @param client - a CoreClient instance that will be used to invoke the URI Resolver Extension wrapper
 * @param resolutionContext - the current URI resolution context
 * @returns A Promise with a Result containing either URI or a manifest if successful
 */
var tryResolveUriWithImplementation = function (uri, implementationUri, client, resolutionContext) { return __awaiter(void 0, void 0, void 0, function () {
    var invokeResult, uriOrManifest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, client.invoke({
                    uri: implementationUri,
                    method: "tryResolveUri",
                    args: {
                        authority: uri.authority,
                        path: uri.path,
                    },
                    resolutionContext: resolutionContext,
                })];
            case 1:
                invokeResult = _a.sent();
                if (!invokeResult.ok) {
                    return [2 /*return*/, invokeResult];
                }
                uriOrManifest = invokeResult.value;
                return [2 /*return*/, (0, result_1.ResultOk)(uriOrManifest !== null && uriOrManifest !== void 0 ? uriOrManifest : undefined)];
        }
    });
}); };
//# sourceMappingURL=UriResolverWrapper.js.map