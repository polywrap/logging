import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/** An abstract IUriResolver implementation that updates the resolution context */
export declare abstract class ResolverWithHistory<TError = undefined> implements IUriResolver<TError> {
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Updates the resolution context with the result.
     *
     * @remarks
     * This method calls the internal abstract method _tryResolveUri before
     * updating the resolution context. Implementations are expect to place
     * resolution logic in _tryResolveUri.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError>>;
    /**
     * A utility function for generating step descriptions to facilitate resolution context updates
     *
     * @param uri - the URI being resolved
     * @param result - the result of a resolution attempt
     *
     * @returns text describing the URI resolution step
     * */
    protected abstract getStepDescription(uri: Uri, result: Result<UriPackageOrWrapper, TError>): string;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Updates the resolution context with the result.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    protected abstract _tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError>>;
}
