"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriResolver = void 0;
var aggregator_1 = require("../aggregator");
var packages_1 = require("../packages");
var wrappers_1 = require("../wrappers");
var redirects_1 = require("../redirects");
var core_js_1 = require("@polywrap/core-js");
// $start: UriResolver
/** An IUriResolver factory */
var UriResolver /* $ */ = /** @class */ (function () {
    function UriResolver() {
    }
    // $start: UriResolver-from
    /**
     * Create an IUriResolver instance
     *
     * @param resolverLike - an object that can be transformed into a resolver
     * @param resolverName - a name to assign to the resolver in resolution history output
     * */
    UriResolver.from = function (resolverLike, resolverName) {
        if (Array.isArray(resolverLike)) {
            return new aggregator_1.UriResolverAggregator(resolverLike.map(function (x) {
                return UriResolver.from(x, resolverName);
            }), resolverName);
        }
        else if (typeof resolverLike === "function") {
            return new aggregator_1.UriResolverAggregator(resolverLike, resolverName);
        }
        else if (resolverLike.tryResolveUri !== undefined) {
            return resolverLike;
        }
        else if (resolverLike.from !== undefined &&
            resolverLike.to !== undefined) {
            var uriRedirect = resolverLike;
            return new redirects_1.RedirectResolver(uriRedirect.from, uriRedirect.to);
        }
        else if (resolverLike.uri !== undefined &&
            resolverLike.package !== undefined) {
            var uriPackage = resolverLike;
            return new packages_1.PackageResolver(core_js_1.Uri.from(uriPackage.uri), uriPackage.package);
        }
        else if (resolverLike.uri !== undefined &&
            resolverLike.wrapper !== undefined) {
            var uriWrapper = resolverLike;
            return new wrappers_1.WrapperResolver(core_js_1.Uri.from(uriWrapper.uri), uriWrapper.wrapper);
        }
        else {
            throw new Error("Unknown resolver-like type");
        }
    };
    return UriResolver;
}());
exports.UriResolver = UriResolver;
//# sourceMappingURL=UriResolver.js.map