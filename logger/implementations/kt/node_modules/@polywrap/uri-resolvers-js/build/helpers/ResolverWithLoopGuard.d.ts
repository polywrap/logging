import { InfiniteLoopError } from "./InfiniteLoopError";
import { UriResolverLike } from "./UriResolverLike";
import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/** An IUriResolver implementation that prevents infinite loops in the resolution path. */
export declare class ResolverWithLoopGuard<TError = undefined> implements IUriResolver<TError | InfiniteLoopError> {
    private _resolver;
    /**
     * Construct a ResolverWithLoopGuard
     *
     * @param _resolver - a resolution to delegate resolution to
     * */
    constructor(_resolver: IUriResolver<TError>);
    /**
     * Create a ResolverWithLoopGuard from a resolver-like object
     *
     * @param resolver - a resolver-like item to delegate resolution to
     *
     * @returns a ResolverWithLoopGuard
     * */
    static from<TResolverError = unknown>(resolver: UriResolverLike): ResolverWithLoopGuard<TResolverError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Ensures the URI is not caught in an infinite loop by checking if it is already resolving.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError | InfiniteLoopError>>;
}
