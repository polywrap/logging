import { UriResolverAggregatorBase } from "./UriResolverAggregatorBase";
import { UriResolverLike } from "../helpers";
import { Result } from "@polywrap/result";
import { IUriResolver, Uri, CoreClient } from "@polywrap/core-js";
/**
 * A function that returns a list of resolvers
 *
 * @param uri - the URI to query
 * @param client - a CoreClient instance
 * */
export type GetResolversFunc = (uri: Uri, client: CoreClient) => Promise<IUriResolver<unknown>[]>;
/**
 * A function that returns a list of resolvers or an error
 *
 * @param uri - the URI to query
 * @param client - a CoreClient instance
 * */
export type GetResolversWithErrorFunc<TError> = (uri: Uri, client: CoreClient) => Promise<Result<IUriResolver<unknown>[], TError>>;
/**
 * An implementation of UriResolverAggregatorBase
 */
export declare class UriResolverAggregator<TResolutionError = undefined, TGetResolversError = undefined> extends UriResolverAggregatorBase<TResolutionError, TGetResolversError> {
    private _resolverName?;
    private _resolvers;
    /**
     * Creates a UriResolverAggregator from a list of resolvers, or from a function
     * that returns a list of resolvers
     * */
    constructor(resolvers: UriResolverLike[], resolverName?: string);
    constructor(resolvers: (uri: Uri, client: CoreClient) => Promise<Result<IUriResolver<unknown>[], TGetResolversError>>, resolverName?: string);
    constructor(resolvers: GetResolversFunc, resolverName?: string);
    /**
     * Get a list of URI Resolvers
     *
     * @param uri - the URI to query for resolvers
     * @param client - a CoreClient instance that can be used to make an invocation
     *
     * @returns a list of IUriResolver or an error
     * */
    getUriResolvers(uri: Uri, client: CoreClient): Promise<Result<IUriResolver<unknown>[], TGetResolversError>>;
    /**
     * A utility function for generating step descriptions to facilitate resolution context updates
     *
     * @returns text describing the URI resolution step
     * */
    protected getStepDescription: () => string;
}
