"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageToWrapperResolver = void 0;
var helpers_1 = require("../helpers");
var core_js_1 = require("@polywrap/core-js");
// $start: PackageToWrapperResolver
/**
 * An IUriResolver implementation that initalizes wrappers from resolved packages.
 * The PackageToWrapperResolver wraps an IUriResolver implementation and delegates resolution to it.
 * */
var PackageToWrapperResolver = /** @class */ (function () {
    // $start: PackageToWrapperResolver-constructor
    /**
     * Creates a PackageToWrapperResolver
     *
     * @param _innerResolver - a resolver to delegate resolution to
     * @param _options - control wrapper manifest deserialization
     * */
    function PackageToWrapperResolver(_innerResolver, _options) {
        this._innerResolver = _innerResolver;
        this._options = _options;
    }
    // $start: PackageToWrapperResolver-from
    /**
     * Creates a PackageToWrapperResolver from a resolver-like object
     *
     * @param innerResolver - a resolver-like item to delegate resolution to
     * @param options - control wrapper manifest deserialization
     *
     * @returns a PackageToWrapperResolver
     * */
    PackageToWrapperResolver.from = function (innerResolver, options) {
        return new PackageToWrapperResolver(helpers_1.UriResolver.from(innerResolver), options);
    };
    // $start: PackageToWrapperResolver-tryResolveUri
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * If successful, cache the result.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    PackageToWrapperResolver.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var subContext, result, wrapPackage, createResult, wrapper;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        subContext = resolutionContext.createSubHistoryContext();
                        return [4 /*yield*/, this._innerResolver.tryResolveUri(uri, client, subContext)];
                    case 1:
                        result = _c.sent();
                        if (!(result.ok && result.value.type === "package")) return [3 /*break*/, 3];
                        wrapPackage = result.value.package;
                        return [4 /*yield*/, wrapPackage.createWrapper({
                                noValidate: (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.deserializeManifestOptions) === null || _b === void 0 ? void 0 : _b.noValidate,
                            })];
                    case 2:
                        createResult = _c.sent();
                        if (!createResult.ok) {
                            return [2 /*return*/, createResult];
                        }
                        wrapper = createResult.value;
                        result = core_js_1.UriResolutionResult.ok(result.value.uri, wrapper);
                        _c.label = 3;
                    case 3:
                        resolutionContext.trackStep({
                            sourceUri: uri,
                            result: result,
                            subHistory: subContext.getHistory(),
                            description: "PackageToWrapperResolver",
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return PackageToWrapperResolver;
}());
exports.PackageToWrapperResolver = PackageToWrapperResolver;
//# sourceMappingURL=PackageToWrapperResolver.js.map