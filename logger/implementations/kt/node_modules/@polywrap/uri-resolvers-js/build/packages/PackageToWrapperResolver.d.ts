import { UriResolverLike } from "../helpers";
import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { DeserializeManifestOptions } from "@polywrap/wrap-manifest-types-js";
import { Result } from "@polywrap/result";
/**
 * An IUriResolver implementation that initalizes wrappers from resolved packages.
 * The PackageToWrapperResolver wraps an IUriResolver implementation and delegates resolution to it.
 * */
export declare class PackageToWrapperResolver<TError> implements IUriResolver<TError | Error> {
    private _innerResolver;
    private _options?;
    /**
     * Creates a PackageToWrapperResolver
     *
     * @param _innerResolver - a resolver to delegate resolution to
     * @param _options - control wrapper manifest deserialization
     * */
    constructor(_innerResolver: IUriResolver<TError>, _options?: {
        deserializeManifestOptions?: DeserializeManifestOptions | undefined;
    } | undefined);
    /**
     * Creates a PackageToWrapperResolver from a resolver-like object
     *
     * @param innerResolver - a resolver-like item to delegate resolution to
     * @param options - control wrapper manifest deserialization
     *
     * @returns a PackageToWrapperResolver
     * */
    static from<TResolverError = unknown>(innerResolver: UriResolverLike, options?: {
        deserializeManifestOptions?: DeserializeManifestOptions;
    }): PackageToWrapperResolver<TResolverError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * If successful, cache the result.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError | Error>>;
}
