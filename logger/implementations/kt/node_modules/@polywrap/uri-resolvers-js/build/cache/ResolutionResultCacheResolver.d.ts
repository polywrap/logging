import { IResolutionResultCache } from "./IResolutionResultCache";
import { UriResolverLike } from "../helpers";
import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/**
 * An IUriResolver implementation that caches the URI resolution result.
 * The URI resolution result can be a URI, IWrapPackage, Wrapper or Error.
 * Errors are not cached by default and can be cached by setting the cacheErrors option to true.
 * The ResolutionResultCacheResolver wraps an IUriResolver implementation and delegates resolution to it.
 * */
export declare class ResolutionResultCacheResolver<TError> implements IUriResolver<TError | Error> {
    private _innerResolver;
    private _cache;
    private _options;
    /**
     * Creates a ResolutionResultCacheResolver
     *
     * @param _innerResolver - a resolver to delegate resolution to
     * @param _cache - a resolution result cache
     * @param options - cacheErrors (default: false)
     * */
    constructor(_innerResolver: IUriResolver<TError>, _cache: IResolutionResultCache<TError>, _options?: {
        cacheErrors: boolean;
    });
    /**
     * Creates a ResolutionResultCacheResolver from a resolver-like object
     *
     * @param innerResolver - a resolver-like item to delegate resolution to
     * @param cache - a resolution result cache
     * @param options - cacheErrors (default: false)
     *
     * @returns a ResolutionResultCacheResolver
     * */
    static from<TResolverError = unknown>(innerResolver: UriResolverLike, cache: IResolutionResultCache<TResolverError>, options?: {
        cacheErrors: boolean;
    }): ResolutionResultCacheResolver<TResolverError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * If successful, cache the result.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError | Error>>;
}
