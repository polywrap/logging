import { IWrapperCache } from "./IWrapperCache";
import { UriResolverLike } from "../helpers";
import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/**
 * An IUriResolver implementation that caches wrappers once they are resolved.
 * As it is a wrapper cache resolver, URI and package caching is outside of the scope for this resolver
 * and can be achieved through other resolvers if necessary.
 * The WrapperCacheResolver wraps an IUriResolver implementation and delegates resolution to it.
 * */
export declare class WrapperCacheResolver<TError> implements IUriResolver<TError | Error> {
    private _innerResolver;
    private _cache;
    /**
     * Creates a WrapperCacheResolver
     *
     * @param _innerResolver - a resolver to delegate resolution to
     * @param _cache - a wrapper cache
     * */
    constructor(_innerResolver: IUriResolver<TError>, _cache: IWrapperCache);
    /**
     * Creates a WrapperCacheResolver from a resolver-like object
     *
     * @param innerResolver - a resolver-like item to delegate resolution to
     * @param cache - a wrapper cache
     * @param options - control wrapper manifest deserialization
     *
     * @returns a WrapperCacheResolver
     * */
    static from<TResolverError = unknown>(innerResolver: UriResolverLike, cache: IWrapperCache): WrapperCacheResolver<TResolverError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * If successful, cache the result.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError | Error>>;
}
