import { UriResolverLike } from "../helpers";
import { IUriResolver, Uri, CoreClient, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
export declare class RequestSynchronizerResolver<TError> implements IUriResolver<TError> {
    private resolverToSynchronize;
    private options?;
    private requestCache;
    /**
     * Construct a RequestSynchronizerResolver
     *
     * @param resolverToSynchronize - the inner resolve whose resolution will be synchronized
     * @param options - the optional options containing the `shouldIgnoreCache` error handler
     * */
    constructor(resolverToSynchronize: IUriResolver<TError>, options?: {
        shouldIgnoreCache?: ((error: TError | undefined) => boolean) | undefined;
    } | undefined);
    /**
     * Create a RequestSynchronizerResolver from a static-resolver-like object
     *
     * @param resolver - a resolver-like object whose resolution will be synchronized
     * @param options - the optional options containing the `shouldIgnoreCache` error handler
     *
     * @returns a RequestSynchronizerResolver
     * */
    static from<TResolverError = unknown>(resolver: UriResolverLike, options?: {
        shouldIgnoreCache?: (error: TResolverError | undefined) => boolean;
    }): RequestSynchronizerResolver<TResolverError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Attempts to resolve the URI using each of the aggregated resolvers sequentially.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, client: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError>>;
    /**
     * A function that resolves a URI and caches the promise of that resolution for subsequent requests
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     * */
    private resolveAndCacheRequest;
}
