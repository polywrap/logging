"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestSynchronizerResolver = void 0;
var helpers_1 = require("../helpers");
// $start: RequestSynchronizerResolver
/* Uri resolver that synchronizes requests to the same URI
 * Multiple requests to the same URI will be resolved only once
 * and the result will be cached for subsequent requests (only for the duration of that first request)
 * Can use the `shouldIgnoreCache` option to determine whether to ignore the cached request in case of an error
 * (default is to use the cache)
 */
var RequestSynchronizerResolver = /** @class */ (function () {
    // $start: RequestSynchronizerResolver-constructor
    /**
     * Construct a RequestSynchronizerResolver
     *
     * @param resolverToSynchronize - the inner resolve whose resolution will be synchronized
     * @param options - the optional options containing the `shouldIgnoreCache` error handler
     * */
    function RequestSynchronizerResolver(resolverToSynchronize, options) {
        this.resolverToSynchronize = resolverToSynchronize;
        this.options = options;
        this.requestCache = new Map();
    }
    // $start: RequestSynchronizerResolver-from
    /**
     * Create a RequestSynchronizerResolver from a static-resolver-like object
     *
     * @param resolver - a resolver-like object whose resolution will be synchronized
     * @param options - the optional options containing the `shouldIgnoreCache` error handler
     *
     * @returns a RequestSynchronizerResolver
     * */
    RequestSynchronizerResolver.from = function (resolver, options) {
        return new RequestSynchronizerResolver(helpers_1.UriResolver.from(resolver), options);
    };
    // $start: RequestSynchronizerResolver-tryResolveUri
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     * Attempts to resolve the URI using each of the aggregated resolvers sequentially.
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    RequestSynchronizerResolver.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var subContext, existingRequest;
            var _this = this;
            return __generator(this, function (_a) {
                subContext = resolutionContext.createSubHistoryContext();
                existingRequest = this.requestCache.get(uri.uri);
                if (existingRequest) {
                    return [2 /*return*/, existingRequest.then(function (result) {
                            var _a;
                            // In case of an error and the shouldIgnoreCache error handler returns true, we try to resolve the URI again.
                            if (!result.ok &&
                                ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.shouldIgnoreCache) &&
                                _this.options.shouldIgnoreCache(result.error)) {
                                return _this.tryResolveUri(uri, client, subContext).then(trackStep(uri, resolutionContext, subContext));
                            }
                            // Otherwise, we use the cached result.
                            resolutionContext.trackStep({
                                sourceUri: uri,
                                result: result,
                                description: "RequestSynchronizerResolver (Cache)",
                            });
                            return result;
                        }, function (error) {
                            // In case of a promise error (not a resolution one) we throw for all of the listeners
                            throw error;
                        })];
                }
                return [2 /*return*/, this.resolveAndCacheRequest(uri, client, subContext).then(trackStep(uri, resolutionContext, subContext))];
            });
        });
    };
    /**
     * A function that resolves a URI and caches the promise of that resolution for subsequent requests
     *
     * @param uri - the URI to resolve
     * @param client - a CoreClient instance that may be used to invoke a wrapper that implements the UriResolver interface
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     * */
    RequestSynchronizerResolver.prototype.resolveAndCacheRequest = function (uri, client, resolutionContext) {
        var _this = this;
        var resolutionRequest = new Promise(function (resolve, reject) {
            _this.resolverToSynchronize
                .tryResolveUri(uri, client, resolutionContext)
                .then(function (data) {
                // Delete from cache before resolve, so that retries don't get the same promise (that ended)
                _this.requestCache.delete(uri.uri);
                resolve(data);
            }, function (error) {
                // Delete from cache before reject, so that retries don't get the same promise (that ended)
                _this.requestCache.delete(uri.uri);
                reject(error);
            });
        });
        this.requestCache.set(uri.uri, resolutionRequest);
        return resolutionRequest;
    };
    return RequestSynchronizerResolver;
}());
exports.RequestSynchronizerResolver = RequestSynchronizerResolver;
var trackStep = function (uri, resolutionContext, subContext) { return function (result) {
    resolutionContext.trackStep({
        sourceUri: uri,
        result: result,
        subHistory: subContext.getHistory(),
        description: "RequestSynchronizerResolver",
    });
    return result;
}; };
//# sourceMappingURL=RequestSynchronizerResolver.js.map