import { UriResolverLike } from "../helpers";
import { CoreClient, IUriResolutionContext, IUriResolver, Uri, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
/**
 * An IUriResolver implementation that efficiently delegates URI resolution to
 * static resolvers--i.e. those that resolve to embedded URIs, Wrappers, and Packages
 * */
export declare class StaticResolver<TError = undefined> implements IUriResolver<TError> {
    uriMap: Map<string, UriPackageOrWrapper>;
    /**
     * Construct a Static Resolver
     *
     * @param uriMap - a mapping of URI to embedded URI, package, or wrapper
     * */
    constructor(uriMap: Map<string, UriPackageOrWrapper>);
    /**
     * Create a StaticResolver from a static-resolver-like object
     *
     * @param staticResolverLikes - an array of resolver-like objects to delegate resolution to
     *
     * @returns a StaticResolver
     * */
    static from<TError = undefined>(staticResolverLikes: UriResolverLike[]): StaticResolver<TError>;
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     *
     * @param uri - the URI to resolve
     * @param _ - not used
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    tryResolveUri(uri: Uri, _: CoreClient, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TError>>;
}
