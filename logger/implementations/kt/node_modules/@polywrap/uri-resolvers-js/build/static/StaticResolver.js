"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticResolver = void 0;
var core_js_1 = require("@polywrap/core-js");
// $start: StaticResolver
/**
 * An IUriResolver implementation that efficiently delegates URI resolution to
 * static resolvers--i.e. those that resolve to embedded URIs, Wrappers, and Packages
 * */
var StaticResolver = /** @class */ (function () {
    // $start: StaticResolver-constructor
    /**
     * Construct a Static Resolver
     *
     * @param uriMap - a mapping of URI to embedded URI, package, or wrapper
     * */
    function StaticResolver(uriMap) {
        this.uriMap = uriMap;
    }
    // $start: StaticResolver-from
    /**
     * Create a StaticResolver from a static-resolver-like object
     *
     * @param staticResolverLikes - an array of resolver-like objects to delegate resolution to
     *
     * @returns a StaticResolver
     * */
    StaticResolver.from = function (staticResolverLikes) {
        var e_1, _a, e_2, _b;
        var uriMap = new Map();
        try {
            for (var staticResolverLikes_1 = __values(staticResolverLikes), staticResolverLikes_1_1 = staticResolverLikes_1.next(); !staticResolverLikes_1_1.done; staticResolverLikes_1_1 = staticResolverLikes_1.next()) {
                var staticResolverLike = staticResolverLikes_1_1.value;
                if (Array.isArray(staticResolverLike)) {
                    var resolver = StaticResolver.from(staticResolverLike);
                    try {
                        for (var _c = (e_2 = void 0, __values(resolver.uriMap)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var _e = __read(_d.value, 2), uri = _e[0], uriPackageOrWrapper = _e[1];
                            uriMap.set(uri, uriPackageOrWrapper);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else if (staticResolverLike.from !== undefined &&
                    staticResolverLike.to !== undefined) {
                    var uriRedirect = staticResolverLike;
                    var from = core_js_1.Uri.from(uriRedirect.from);
                    uriMap.set(from.uri, {
                        type: "uri",
                        uri: core_js_1.Uri.from(uriRedirect.to),
                    });
                }
                else if (staticResolverLike.uri !== undefined &&
                    staticResolverLike.package !== undefined) {
                    var uriPackage = staticResolverLike;
                    var uri = core_js_1.Uri.from(uriPackage.uri);
                    uriMap.set(uri.uri, {
                        type: "package",
                        uri: uri,
                        package: uriPackage.package,
                    });
                }
                else if (staticResolverLike.uri !== undefined &&
                    staticResolverLike.wrapper !== undefined) {
                    var uriWrapper = staticResolverLike;
                    var uri = core_js_1.Uri.from(uriWrapper.uri);
                    uriMap.set(uri.uri, {
                        type: "wrapper",
                        uri: uri,
                        wrapper: uriWrapper.wrapper,
                    });
                }
                else {
                    throw new Error("Unknown static-resolver-like type provided.");
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (staticResolverLikes_1_1 && !staticResolverLikes_1_1.done && (_a = staticResolverLikes_1.return)) _a.call(staticResolverLikes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new StaticResolver(uriMap);
    };
    // $start: StaticResolver-tryResolveUri
    /**
     * Resolve a URI to a wrap package, a wrapper, or a URI.
     *
     * @param uri - the URI to resolve
     * @param _ - not used
     * @param resolutionContext - the current URI resolution context
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    StaticResolver.prototype.tryResolveUri = function (uri, _, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var uriPackageOrWrapper, result, description;
            return __generator(this, function (_a) {
                uriPackageOrWrapper = this.uriMap.get(uri.uri);
                description = "";
                if (uriPackageOrWrapper) {
                    result = core_js_1.UriResolutionResult.ok(uriPackageOrWrapper);
                    switch (uriPackageOrWrapper.type) {
                        case "package":
                            description = "StaticResolver - Package (".concat(uri.uri, ")");
                            break;
                        case "wrapper":
                            description = "StaticResolver - Wrapper (".concat(uri.uri, ")");
                            break;
                        case "uri":
                            description = "StaticResolver - Redirect (".concat(uri.uri, " - ").concat(uriPackageOrWrapper.uri.uri, ")");
                            break;
                    }
                }
                else {
                    result = core_js_1.UriResolutionResult.ok(uri);
                    description = "StaticResolver - Miss";
                }
                resolutionContext.trackStep({
                    sourceUri: uri,
                    result: result,
                    description: description,
                });
                return [2 /*return*/, result];
            });
        });
    };
    return StaticResolver;
}());
exports.StaticResolver = StaticResolver;
//# sourceMappingURL=StaticResolver.js.map