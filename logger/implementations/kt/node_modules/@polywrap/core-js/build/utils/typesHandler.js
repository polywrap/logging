"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typesHandler = void 0;
/**
 * Converts a Map object with string keys into an object with key-value pairs
 * that can be stringified using JSON.stringify. Returns an empty object if the
 * keys are not of type string. Returns the original value if it is not a Map.
 *
 * @param _ Unused.
 * @param value The value from the object to be stringified.
 * @returns The converted object or the original value if it is not a Map
 * or if the Map's keys are not of type string.
 */
var typesHandler = function (_, value) {
    var e_1, _a;
    if (value instanceof Map) {
        var obj = {};
        var firstKey = value.keys().next().value;
        if (typeof firstKey === "string") {
            try {
                for (var _b = __values(value.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                    obj[k] = v;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return obj;
    }
    return value;
};
exports.typesHandler = typesHandler;
//# sourceMappingURL=typesHandler.js.map