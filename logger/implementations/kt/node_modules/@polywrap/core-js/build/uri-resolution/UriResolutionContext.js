"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriResolutionContext = void 0;
var types_1 = require("../types");
// $start: UriResolutionContext
/** An implementation of the IUriResolutionContext interface */
var UriResolutionContext = /** @class */ (function () {
    function UriResolutionContext(resolvingUriMap, resolutionPathOrHistory) {
        this._resolvingUriMap = resolvingUriMap !== null && resolvingUriMap !== void 0 ? resolvingUriMap : new Map();
        if (Array.isArray(resolutionPathOrHistory)) {
            this._resolutionPath = new Set();
            this._history = resolutionPathOrHistory;
        }
        else if (resolutionPathOrHistory instanceof Set) {
            this._resolutionPath = resolutionPathOrHistory;
            this._history = [];
        }
        else {
            this._resolutionPath = new Set();
            this._history = [];
        }
    }
    UriResolutionContext.prototype.isResolving = function (uri) {
        return !!this._resolvingUriMap.get(uri.toString());
    };
    UriResolutionContext.prototype.startResolving = function (uri) {
        this._resolvingUriMap.set(uri.toString(), true);
        this._resolutionPath.add(uri.toString());
    };
    UriResolutionContext.prototype.stopResolving = function (uri) {
        this._resolvingUriMap.delete(uri.toString());
    };
    UriResolutionContext.prototype.trackStep = function (step) {
        this._history.push(step);
    };
    UriResolutionContext.prototype.getHistory = function () {
        return this._history;
    };
    UriResolutionContext.prototype.getResolutionPath = function () {
        return __spreadArray([], __read(this._resolutionPath), false).map(function (x) { return new types_1.Uri(x); });
    };
    UriResolutionContext.prototype.createSubHistoryContext = function () {
        return new UriResolutionContext(this._resolvingUriMap, this._resolutionPath);
    };
    UriResolutionContext.prototype.createSubContext = function () {
        var e_1, _a;
        var map = new Map();
        try {
            // Copy the resolvingUriMap to the new map, so that changes to the new map don't affect the old map
            for (var _b = __values(this._resolvingUriMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                this._resolvingUriMap.get(key) && map.set(key, true);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new UriResolutionContext(map, []);
    };
    return UriResolutionContext;
}());
exports.UriResolutionContext = UriResolutionContext;
//# sourceMappingURL=UriResolutionContext.js.map