"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uri = void 0;
var result_1 = require("@polywrap/result");
// $end
// $start: Uri
/**
 * A Polywrap URI. Some examples of valid URIs are:
 * wrap://https/domain.com
 * wrap://ipfs/QmHASH
 * wrap://wrapscan.io/polywrap/wrap@1.2.3
 * wrap://ens/sub.domain.eth
 * wrap://file/directory/file.txt
 *
 * Some example short-hand URIs (utilizing inference):
 * ipfs/QmHASH        -> wrap://ipfs/QmHASH
 * https://domain.com -> wrap://https/domain.com
 *
 * URI inference is performed in the following ways:
 * 1. If wrap:// is missing, it will be added.
 * 2. If non-wrap schema exists, it becomes the authority.
 *
 * Breaking down the various parts of the URI, as it applies
 * to [the URI standard](https://tools.ietf.org/html/rfc3986#section-3):
 * **wrap://** - URI Scheme: differentiates Polywrap URIs.
 * **wrapscan.io/** - URI Authority: allows the Polywrap URI resolution algorithm to determine an authoritative URI resolver.
 * **polywrap/wrap@1.2.3** - URI Path: tells the Authority where the Wrapper resides.
 */
var Uri = /** @class */ (function () {
    // $start: Uri-constructor
    /**
     * Construct a Uri instance from a wrap URI string
     *
     * @remarks
     * Throws if URI string is invalid
     *
     * @param uri - a string representation of a wrap URI
     */
    function Uri(uri) {
        var result = Uri.parseUri(uri);
        if (!result.ok) {
            throw result.error;
        }
        this._config = result.value;
    }
    Object.defineProperty(Uri.prototype, "authority", {
        // $start: Uri-authority
        /** @returns Uri authority */
        get: function () {
            return this._config.authority;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "path", {
        // $start: Uri-path
        /** @returns Uri path */
        get: function () {
            return this._config.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "uri", {
        // $start: Uri-uri
        /** @returns Uri string representation */
        get: function () {
            return this._config.uri;
        },
        enumerable: false,
        configurable: true
    });
    // $start: Uri-equals
    /** Test two Uri instances for equality */
    Uri.equals = function (a, b) {
        return a.uri === b.uri;
    };
    // $start: Uri-isUri
    /**
     * Check if a value is an instance of Uri
     *
     * @param value - value to check
     * @returns true if value is a Uri instance */
    Uri.isUri = function (value) {
        return typeof value === "object" && value.uri !== undefined;
    };
    // $start: Uri-isValidUri
    /**
     * Test if a URI string is a valid wrap URI
     *
     * @param uri - URI string
     * @param parsed? - UriConfig to update (mutate) with content of URI string
     * @returns true if input string is a valid wrap URI */
    Uri.isValidUri = function (uri, parsed) {
        var result = Uri.parseUri(uri);
        if (parsed && result.ok) {
            Object.assign(parsed, result.value);
        }
        return result.ok;
    };
    // $start: Uri-parseUri
    /**
     * Parse a wrap URI string into its authority and path
     *
     * @param uri - a string representation of a wrap URI
     * @returns A Result containing a UriConfig, if successful, or an error
     */
    Uri.parseUri = function (input) {
        var authorityDelimiter = "/";
        var schemeDelimiter = "://";
        var wrapScheme = "wrap://";
        var validUriExamples = "wrapscan.io/polywrap/wrap@1.2.3\n" +
            "ipfs/QmHASH\n" +
            "https://domain.com/path\n" +
            "wrap://ens/domain.eth\n" +
            "wrap://ipfs/QmHASH\n\n";
        if (!input) {
            return (0, result_1.ResultErr)(Error("The provided URI is empty, here are some examples of valid URIs:\n" +
                validUriExamples));
        }
        var processedUri = input.trim();
        // Remove leading "/"
        if (processedUri.startsWith(authorityDelimiter)) {
            processedUri = processedUri.substring(1);
        }
        // Check if the string starts with a non-wrap URI scheme
        if (!processedUri.startsWith(wrapScheme)) {
            var schemeIndex = processedUri.indexOf(schemeDelimiter);
            var authorityIndex = processedUri.indexOf(authorityDelimiter);
            if (schemeIndex !== -1) {
                // Make sure the string before the scheme doesn't contain an authority
                if (!(authorityIndex !== -1 && schemeIndex > authorityIndex)) {
                    processedUri =
                        processedUri.substring(0, schemeIndex) +
                            "/" +
                            processedUri.substring(schemeIndex + schemeDelimiter.length);
                }
            }
        }
        else {
            processedUri = processedUri.substring(wrapScheme.length);
        }
        // Split the string into parts, using "/" as a delimeter
        var parts = processedUri.split(authorityDelimiter);
        if (parts.length < 2) {
            return (0, result_1.ResultErr)(Error("URI authority is missing, here are some examples of valid URIs:\n" +
                validUriExamples +
                "Invalid URI Received: ".concat(input)));
        }
        // Extract the authority and path
        var authority = parts[0];
        // Authority should begin with a word character (alphanumeric, underscore)
        var validAuthorityRegExp = /^\w.*/;
        if (!validAuthorityRegExp.test(authority)) {
            return (0, result_1.ResultErr)(Error("URI authority must start with an alphanumeric character or an underscore.\n" +
                "Invalid URI Received: ".concat(input)));
        }
        var path = parts.slice(1).join("/");
        if (!path) {
            return (0, result_1.ResultErr)(Error("URI path is missing, here are some examples of valid URIs:\n" +
                validUriExamples +
                "Invalid URI Received: ".concat(input)));
        }
        // Add "wrap://" if not already present
        if (!processedUri.startsWith("wrap://")) {
            processedUri = "wrap://" + processedUri;
        }
        return (0, result_1.ResultOk)({
            uri: processedUri,
            authority: authority,
            path: path,
        });
    };
    // $start: Uri-from
    /**
     * Construct a Uri instance from a Uri or a wrap URI string
     *
     * @remarks
     * Throws if URI string is invalid
     *
     * @param uri - a Uri instance or a string representation of a wrap URI
     */
    Uri.from = function (uri) {
        if (typeof uri === "string") {
            return new Uri(uri);
        }
        else if (Uri.isUri(uri)) {
            return uri;
        }
        else {
            throw Error("Unknown uri type, cannot convert. ".concat(JSON.stringify(uri)));
        }
    };
    // $start: Uri-toString
    /** @returns Uri string representation */
    Uri.prototype.toString = function () {
        return this._config.uri;
    };
    // $start: Uri-toJSON
    /** @returns Uri string representation */
    Uri.prototype.toJSON = function () {
        return this._config.uri;
    };
    return Uri;
}());
exports.Uri = Uri;
//# sourceMappingURL=Uri.js.map