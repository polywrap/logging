import { Result } from "@polywrap/result";
/** URI configuration */
export interface UriConfig {
    /** URI Authority: allows the Polywrap URI resolution algorithm to determine an authoritative URI resolver. */
    authority: string;
    /** URI Path: tells the Authority where the Wrapper resides. */
    path: string;
    /** Full string representation of URI */
    uri: string;
}
/**
 * A Polywrap URI. Some examples of valid URIs are:
 * wrap://https/domain.com
 * wrap://ipfs/QmHASH
 * wrap://wrapscan.io/polywrap/wrap@1.2.3
 * wrap://ens/sub.domain.eth
 * wrap://file/directory/file.txt
 *
 * Some example short-hand URIs (utilizing inference):
 * ipfs/QmHASH        -> wrap://ipfs/QmHASH
 * https://domain.com -> wrap://https/domain.com
 *
 * URI inference is performed in the following ways:
 * 1. If wrap:// is missing, it will be added.
 * 2. If non-wrap schema exists, it becomes the authority.
 *
 * Breaking down the various parts of the URI, as it applies
 * to [the URI standard](https://tools.ietf.org/html/rfc3986#section-3):
 * **wrap://** - URI Scheme: differentiates Polywrap URIs.
 * **wrapscan.io/** - URI Authority: allows the Polywrap URI resolution algorithm to determine an authoritative URI resolver.
 * **polywrap/wrap@1.2.3** - URI Path: tells the Authority where the Wrapper resides.
 */
export declare class Uri {
    private _config;
    /** @returns Uri authority */
    get authority(): string;
    /** @returns Uri path */
    get path(): string;
    /** @returns Uri string representation */
    get uri(): string;
    /**
     * Construct a Uri instance from a wrap URI string
     *
     * @remarks
     * Throws if URI string is invalid
     *
     * @param uri - a string representation of a wrap URI
     */
    constructor(uri: string);
    /** Test two Uri instances for equality */
    static equals(a: Uri, b: Uri): boolean;
    /**
     * Check if a value is an instance of Uri
     *
     * @param value - value to check
     * @returns true if value is a Uri instance */
    static isUri(value: unknown): value is Uri;
    /**
     * Test if a URI string is a valid wrap URI
     *
     * @param uri - URI string
     * @param parsed? - UriConfig to update (mutate) with content of URI string
     * @returns true if input string is a valid wrap URI */
    static isValidUri(uri: string, parsed?: UriConfig): boolean;
    /**
     * Parse a wrap URI string into its authority and path
     *
     * @param uri - a string representation of a wrap URI
     * @returns A Result containing a UriConfig, if successful, or an error
     */
    static parseUri(input: string): Result<UriConfig, Error>;
    /**
     * Construct a Uri instance from a Uri or a wrap URI string
     *
     * @remarks
     * Throws if URI string is invalid
     *
     * @param uri - a Uri instance or a string representation of a wrap URI
     */
    static from(uri: Uri | string): Uri;
    /** @returns Uri string representation */
    toString(): string;
    /** @returns Uri string representation */
    toJSON(): string;
}
