import { Uri } from "./Uri";
export declare class UriMap<TValue> implements Map<Uri, TValue>, ReadonlyUriMap<TValue> {
    private map;
    constructor(entries?: readonly (readonly [Uri, TValue])[]);
    clear(): void;
    delete(key: Uri): boolean;
    forEach(callbackfn: (value: TValue, key: Uri, map: Map<Uri, TValue>) => void, thisArg?: unknown): void;
    get(key: Uri): TValue | undefined;
    has(key: Uri): boolean;
    set(key: Uri, value: TValue): this;
    get size(): number;
    [Symbol.toStringTag]: string;
    entries(): IterableIterator<[Uri, TValue]>;
    keys(): IterableIterator<Uri>;
    values(): IterableIterator<TValue>;
    [Symbol.iterator](): IterableIterator<[Uri, TValue]>;
}
export type ReadonlyUriMap<T> = ReadonlyMap<Uri, T>;
