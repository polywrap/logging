"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriMap = void 0;
var Uri_1 = require("./Uri");
var UriMap = /** @class */ (function () {
    function UriMap(entries) {
        this[_a] = "UriMap";
        this.map = new Map(entries === null || entries === void 0 ? void 0 : entries.map(function (x) { return [x[0].uri, x[1]]; }));
    }
    UriMap.prototype.clear = function () {
        this.map.clear();
    };
    UriMap.prototype.delete = function (key) {
        return this.map.delete(key.uri);
    };
    UriMap.prototype.forEach = function (callbackfn, thisArg) {
        var _this = this;
        this.map.forEach(function (v, k) { return callbackfn(v, Uri_1.Uri.from(k), _this); }, thisArg);
    };
    UriMap.prototype.get = function (key) {
        return this.map.get(key.uri);
    };
    UriMap.prototype.has = function (key) {
        return this.map.has(key.uri);
    };
    UriMap.prototype.set = function (key, value) {
        this.map.set(key.uri, value);
        return this;
    };
    Object.defineProperty(UriMap.prototype, "size", {
        get: function () {
            return this.map.size;
        },
        enumerable: false,
        configurable: true
    });
    UriMap.prototype.entries = function () {
        var _b, _c, _d, k, v, e_1_1;
        var e_1, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _f.trys.push([0, 5, 6, 7]);
                    _b = __values(this.map.entries()), _c = _b.next();
                    _f.label = 1;
                case 1:
                    if (!!_c.done) return [3 /*break*/, 4];
                    _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                    return [4 /*yield*/, [Uri_1.Uri.from(k), v]];
                case 2:
                    _f.sent();
                    _f.label = 3;
                case 3:
                    _c = _b.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _f.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    UriMap.prototype.keys = function () {
        var _b, _c, k, e_2_1;
        var e_2, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _e.trys.push([0, 5, 6, 7]);
                    _b = __values(this.map.keys()), _c = _b.next();
                    _e.label = 1;
                case 1:
                    if (!!_c.done) return [3 /*break*/, 4];
                    k = _c.value;
                    return [4 /*yield*/, Uri_1.Uri.from(k)];
                case 2:
                    _e.sent();
                    _e.label = 3;
                case 3:
                    _c = _b.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_2_1 = _e.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    UriMap.prototype.values = function () {
        return this.map.values();
    };
    UriMap.prototype[(_a = Symbol.toStringTag, Symbol.iterator)] = function () {
        return this.entries();
    };
    return UriMap;
}());
exports.UriMap = UriMap;
//# sourceMappingURL=UriMap.js.map