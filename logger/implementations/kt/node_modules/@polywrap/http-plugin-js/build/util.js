"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toFormData = exports.toAxiosRequestConfig = exports.fromAxiosResponse = void 0;
var wrap_1 = require("./wrap");
var form_data_1 = __importDefault(require("form-data"));
/**
 * Convert AxiosResponse<string> to Response
 *
 * @param axiosResponse
 */
function fromAxiosResponse(axiosResponse) {
    var e_1, _a;
    var responseHeaders = new Map();
    try {
        for (var _b = __values(Object.keys(axiosResponse.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            responseHeaders.set(key, Array.isArray(axiosResponse.headers[key])
                ? axiosResponse.headers[key].join(" ")
                : axiosResponse.headers[key]);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var response = {
        status: axiosResponse.status,
        statusText: axiosResponse.statusText,
        headers: responseHeaders,
    };
    // encode bytes as base64 string if response is array buffer
    if (axiosResponse.config.responseType == "arraybuffer") {
        if (!(axiosResponse.data instanceof ArrayBuffer)) {
            if (!Buffer.isBuffer(axiosResponse.data)) {
                throw Error("HttpPlugin: Axios response data malformed, must be a buffer. Type: " +
                    typeof axiosResponse.data);
            }
        }
        return __assign(__assign({}, response), { body: Buffer.from(axiosResponse.data).toString("base64") });
    }
    else {
        switch (typeof axiosResponse.data) {
            case "string":
            case "undefined":
                return __assign(__assign({}, response), { body: axiosResponse.data });
            default:
                return __assign(__assign({}, response), { body: JSON.stringify(axiosResponse.data) });
        }
    }
}
exports.fromAxiosResponse = fromAxiosResponse;
/**
 * Creates AxiosRequestConfig from Request
 *
 * @param request
 */
function toAxiosRequestConfig(request) {
    var responseType = "text";
    switch (request.responseType) {
        case "BINARY":
        case wrap_1.ResponseTypeEnum.BINARY:
            responseType = "arraybuffer";
    }
    var config = {
        responseType: responseType,
    };
    if (request.urlParams) {
        config = __assign(__assign({}, config), { params: Object.fromEntries(request.urlParams) });
    }
    if (request.headers) {
        config = __assign(__assign({}, config), { headers: Object.fromEntries(request.headers) });
    }
    if (request.timeout) {
        config.timeout = request.timeout;
    }
    return config;
}
exports.toAxiosRequestConfig = toAxiosRequestConfig;
function toFormData(entries) {
    var fd = new form_data_1.default();
    entries.forEach(function (entry) {
        var _a, _b, _c;
        var options = {};
        options.contentType = (_a = entry.type) !== null && _a !== void 0 ? _a : undefined;
        options.filename = (_b = entry.fileName) !== null && _b !== void 0 ? _b : undefined;
        var value;
        if (entry.type) {
            value = entry.value
                ? Buffer.from(entry.value, "base64")
                : Buffer.alloc(0);
        }
        else {
            value = (_c = entry.value) !== null && _c !== void 0 ? _c : undefined;
        }
        fd.append(entry.name, value, options);
    });
    return fd;
}
exports.toFormData = toFormData;
//# sourceMappingURL=util.js.map