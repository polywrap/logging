"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
function migrate(migrate, logger) {
    var _a, _b, _c;
    if ((_a = migrate.extensions) === null || _a === void 0 ? void 0 : _a.meta) {
        logger === null || logger === void 0 ? void 0 : logger.warn("The Polywrap Meta Manifest has been deprecated, please use the new \"resources\" field in the Polywrap Manifest.");
        delete migrate.extensions.meta;
    }
    if ((_b = migrate.extensions) === null || _b === void 0 ? void 0 : _b.deploy) {
        logger === null || logger === void 0 ? void 0 : logger.warn("The Polywrap Deploy Manifest no longer needs to be listed as a project extension, and can be used as a standalone.");
        delete migrate.extensions.deploy;
    }
    if ((_c = migrate.extensions) === null || _c === void 0 ? void 0 : _c.infra) {
        logger === null || logger === void 0 ? void 0 : logger.warn("The Polywrap Infra Manifest no longer needs to be listed as a project extension, and can be used as a standalone.");
        delete migrate.extensions.infra;
    }
    var hasExtensions = migrate.extensions && Object.keys(migrate.extensions).length > 0;
    return __assign(__assign({}, migrate), { format: "0.3.0", extensions: hasExtensions ? migrate.extensions : undefined });
}
exports.migrate = migrate;
//# sourceMappingURL=0.2.0_to_0.3.0.js.map