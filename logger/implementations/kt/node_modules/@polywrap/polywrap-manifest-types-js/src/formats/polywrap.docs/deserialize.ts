/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  DocsManifest,
  AnyDocsManifest,
  migrateDocsManifest,
  validateDocsManifest,
  latestDocsManifestFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "yaml";

export function deserializeDocsManifest(
  manifest: string,
  options?: DeserializeManifestOptions
): DocsManifest {
  let anyDocsManifest: AnyDocsManifest | undefined;
  try {
    anyDocsManifest = JSON.parse(manifest) as AnyDocsManifest;
  } catch (_) {
    try {
      anyDocsManifest = YAML.parse(manifest) as AnyDocsManifest;
    } catch (_) { }
  }

  if (!anyDocsManifest) {
    throw Error(`Unable to parse DocsManifest: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validateDocsManifest(anyDocsManifest, options?.extSchema);
  }

  anyDocsManifest.__type = "DocsManifest";

  const versionCompare = Semver.compare(
    Semver.coerce(anyDocsManifest.format) || anyDocsManifest.format,
    Semver.coerce(latestDocsManifestFormat) || latestDocsManifestFormat
  );

  if (versionCompare === -1) {
    // Warn user to migrate their manifest
    options?.logger?.warn(`DocsManifest is using an older version of the manifest format (${anyDocsManifest.format}). Please update your manifest to the latest version (${latestDocsManifestFormat}) by using the "polywrap manifest migrate <type>" command.`);

    // Upgrade
    return migrateDocsManifest(anyDocsManifest, latestDocsManifestFormat, options?.logger);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyDocsManifest.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyDocsManifest as DocsManifest;
  }
}
