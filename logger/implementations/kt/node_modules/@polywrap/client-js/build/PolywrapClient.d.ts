import { InvokerOptions, TryResolveUriOptions } from "./types";
import { PolywrapCoreClient } from "@polywrap/core-client-js";
import { CoreClientConfig, GetFileOptions, GetImplementationsOptions, InvokeResult, IUriResolutionContext, IUriResolver, ReadonlyUriMap, Uri, UriPackageOrWrapper, ValidateOptions, WrapError, Wrapper, WrapperEnv } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
import { DeserializeManifestOptions, WrapManifest } from "@polywrap/wrap-manifest-types-js";
import { TracerConfig } from "@polywrap/tracing-js";
export declare class PolywrapClient extends PolywrapCoreClient {
    /**
     * Instantiate a PolywrapClient
     *
     * @param config - a client configuration
     */
    constructor(config?: CoreClientConfig);
    /**
     * Enable tracing for intricate debugging
     *
     * @remarks
     * Tracing uses the @polywrap/tracing-js package
     *
     * @param tracerConfig - configure options such as the tracing level
     * @returns void
     */
    setTracingEnabled(tracerConfig?: Partial<TracerConfig>): void;
    getConfig(): CoreClientConfig;
    getInterfaces(): ReadonlyUriMap<readonly Uri[]> | undefined;
    getEnvs(): ReadonlyUriMap<WrapperEnv> | undefined;
    getResolver(): IUriResolver<unknown>;
    getEnvByUri<TUri extends Uri | string = string>(uri: TUri): WrapperEnv | undefined;
    getManifest<TUri extends Uri | string = string>(uri: TUri): Promise<Result<WrapManifest, WrapError>>;
    getFile<TUri extends Uri | string = string>(uri: TUri, options: GetFileOptions): Promise<Result<string | Uint8Array, WrapError>>;
    getImplementations<TUri extends Uri | string = string>(uri: TUri, options?: GetImplementationsOptions): Promise<Result<Uri[], WrapError>>;
    invokeWrapper<TData = unknown, TUri extends Uri | string = string>(options: InvokerOptions<TUri> & {
        wrapper: Wrapper;
    }): Promise<InvokeResult<TData>>;
    invoke<TData = unknown, TUri extends Uri | string = string>(options: InvokerOptions<TUri>): Promise<InvokeResult<TData>>;
    tryResolveUri<TUri extends Uri | string = string>(options: TryResolveUriOptions<TUri>): Promise<Result<UriPackageOrWrapper, unknown>>;
    loadWrapper(uri: Uri, resolutionContext?: IUriResolutionContext, options?: DeserializeManifestOptions): Promise<Result<Wrapper, WrapError>>;
    /**
     * Validate a wrapper, given a URI.
     * Optionally, validate the full ABI and/or recursively validate imports.
     *
     * @param uri - the Uri to resolve
     * @param options - { abi?: boolean; recursive?: boolean }
     * @returns A Promise with a Result containing a boolean or Error
     */
    validate<TUri extends Uri | string>(uri: TUri, options: ValidateOptions): Promise<Result<true, Error>>;
}
