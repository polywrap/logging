"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLocalImports = exports.parseExternalImports = exports.parseUse = void 0;
var types_1 = require("./types");
var utils_1 = require("./utils");
function parseUse(useStatements) {
    var e_1, _a;
    var uses = [];
    try {
        for (var useStatements_1 = __values(useStatements), useStatements_1_1 = useStatements_1.next(); !useStatements_1_1.done; useStatements_1_1 = useStatements_1.next()) {
            var useStatement = useStatements_1_1.value;
            if (useStatement.length !== 3) {
                throw Error("Invalid use statement found:\n".concat(useStatement[0], "\n") +
                    "Please use the following syntax...\n".concat(types_1.SYNTAX_REFERENCE));
            }
            var usedTypes = useStatement[1]
                .split(",")
                .map(function (str) { return str.replace(/\s+/g, ""); }) // Trim all whitespace
                .filter(Boolean); // Remove empty strings
            var useForName = useStatement[2];
            // Make sure the developer does not import the same dependency more than once
            var duplicateUsedTypes = (0, utils_1.getDuplicates)(usedTypes);
            if (duplicateUsedTypes.length > 0) {
                throw Error("Duplicate type found: ".concat(duplicateUsedTypes, " \nIn Use: ").concat(useForName));
            }
            uses.push({
                usedTypes: usedTypes,
                namespace: useForName,
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (useStatements_1_1 && !useStatements_1_1.done && (_a = useStatements_1.return)) _a.call(useStatements_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return uses;
}
exports.parseUse = parseUse;
function parseExternalImports(imports) {
    var e_2, _a, e_3, _b;
    var externalImports = [];
    try {
        for (var imports_1 = __values(imports), imports_1_1 = imports_1.next(); !imports_1_1.done; imports_1_1 = imports_1.next()) {
            var importStatement = imports_1_1.value;
            if (importStatement.length !== 4) {
                throw Error("Invalid external import statement found:\n".concat(importStatement[0], "\n") +
                    "Please use the following syntax...\n".concat(types_1.SYNTAX_REFERENCE));
            }
            var importedTypes = importStatement[1]
                .split(",")
                // Trim all whitespace and brackets
                .map(function (str) { return str.replace(/(\s+|\{|\})/g, ""); })
                // Remove empty strings
                .filter(Boolean);
            var importFromName = importStatement[3];
            // Make sure the developer does not import the same dependency more than once
            var duplicateimportedTypes = (0, utils_1.getDuplicates)(importedTypes);
            if (duplicateimportedTypes.length > 0) {
                throw Error("Duplicate type found: ".concat(duplicateimportedTypes, " \nIn import: ").concat(importFromName));
            }
            // Make sure the developer does not try to import a dependencies dependency
            var index = importedTypes.findIndex(function (str) { return str.indexOf("_") > -1; });
            if (index > -1) {
                throw Error("Importing a dependency's imported type is forbidden. Only import types that do not have an '_' in the typename.");
            }
            var namespace = importStatement[2];
            var uri = importStatement[3];
            externalImports.push({
                importedTypes: importedTypes,
                namespace: namespace,
                importFrom: uri,
            });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (imports_1_1 && !imports_1_1.done && (_a = imports_1.return)) _a.call(imports_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    // Make sure namespaces are unique
    var namespaces = externalImports.map(function (extImport) { return extImport.namespace; });
    var duplicateNamespaces = (0, utils_1.getDuplicates)(namespaces);
    if (duplicateNamespaces.length > 0) {
        throw Error("Duplicate namespaces found: ".concat(duplicateNamespaces));
    }
    // Make sure all uris have the same namespace
    var uriToNamespace = {};
    try {
        for (var externalImports_1 = __values(externalImports), externalImports_1_1 = externalImports_1.next(); !externalImports_1_1.done; externalImports_1_1 = externalImports_1.next()) {
            var ext = externalImports_1_1.value;
            if (uriToNamespace[ext.importFrom]) {
                if (uriToNamespace[ext.importFrom] !== ext.namespace) {
                    throw Error("Imports from a single URI must be imported into the same namespace.\nURI: ".concat(ext.importFrom, "\nNamespace 1: ").concat(ext.namespace, "\nNamespace 2: ").concat(uriToNamespace[ext.importFrom]));
                }
            }
            else {
                uriToNamespace[ext.importFrom] = ext.namespace;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (externalImports_1_1 && !externalImports_1_1.done && (_b = externalImports_1.return)) _b.call(externalImports_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return externalImports;
}
exports.parseExternalImports = parseExternalImports;
function parseLocalImports(imports) {
    var e_4, _a;
    var localImports = [];
    try {
        for (var imports_2 = __values(imports), imports_2_1 = imports_2.next(); !imports_2_1.done; imports_2_1 = imports_2.next()) {
            var importStatement = imports_2_1.value;
            if (importStatement.length !== 3) {
                throw Error("Invalid local import statement found:\n".concat(importStatement[0], "\n") +
                    "Please use the following syntax...\n".concat(types_1.SYNTAX_REFERENCE));
            }
            var importTypes = importStatement[1]
                .split(",")
                // Trim all whitespace and brackets
                .map(function (str) { return str.replace(/(\s+|\{|\})/g, ""); })
                // Remove empty strings
                .filter(Boolean);
            var importFrom = importStatement[2];
            // Make sure the developer does not try to import a dependencies dependency
            var index = importTypes.findIndex(function (str) { return str.indexOf("_") > -1; });
            if (index > -1) {
                throw Error("User defined types with '_' in their name are forbidden. This is used for Polywrap import namespacing.");
            }
            localImports.push({
                importedTypes: importTypes,
                importFrom: importFrom,
            });
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (imports_2_1 && !imports_2_1.done && (_a = imports_2.return)) _a.call(imports_2);
        }
        finally { if (e_4) throw e_4.error; }
    }
    // Make sure types are unique
    var localImportNames = [];
    localImports.forEach(function (imp) { return localImportNames.push.apply(localImportNames, __spreadArray([], __read(imp.importedTypes), false)); });
    var duplicateImportTypes = (0, utils_1.getDuplicates)(localImportNames);
    if (duplicateImportTypes.length > 0) {
        throw Error("Duplicate type found: ".concat(duplicateImportTypes));
    }
    return localImports;
}
exports.parseLocalImports = parseLocalImports;
//# sourceMappingURL=parse.js.map