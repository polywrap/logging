"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.loggerPlugin = exports.LoggerPlugin = void 0;
var wrap_1 = require("./wrap");
var plugin_js_1 = require("@polywrap/plugin-js");
var LoggerPlugin = /** @class */ (function (_super) {
    __extends(LoggerPlugin, _super);
    function LoggerPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoggerPlugin.prototype.log = function (args) {
        if (this.config.logFunc) {
            this.config.logFunc(args.level, args.message);
            return true;
        }
        switch (args.level) {
            case "DEBUG":
            case wrap_1.LogLevelEnum.DEBUG:
                console.debug(args.message);
                break;
            case "WARN":
            case wrap_1.LogLevelEnum.WARN:
                console.warn(args.message);
                break;
            case "ERROR":
            case wrap_1.LogLevelEnum.ERROR:
                console.error(args.message);
                break;
            case "INFO":
            case wrap_1.LogLevelEnum.INFO:
                console.log(args.message);
                break;
            default:
                console.log(args.message);
        }
        return true;
    };
    return LoggerPlugin;
}(wrap_1.Module));
exports.LoggerPlugin = LoggerPlugin;
var loggerPlugin = function (config) { return new plugin_js_1.PluginPackage(new LoggerPlugin(config), wrap_1.manifest); };
exports.loggerPlugin = loggerPlugin;
exports.plugin = exports.loggerPlugin;
//# sourceMappingURL=index.js.map