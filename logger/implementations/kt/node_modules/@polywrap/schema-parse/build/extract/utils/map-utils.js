"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toGraphQLType = exports.parseMapType = exports.parseCurrentType = void 0;
var __1 = require("../..");
// TODO: Make sure map also works for imported types and modules
var _parseCurrentType = function (rootType, type) {
    var required = undefined;
    if (type.startsWith("[")) {
        var closeSquareBracketIdx = type.lastIndexOf("]");
        if (type[closeSquareBracketIdx + 1] === "!") {
            required = true;
        }
        return {
            currentType: "Array",
            subType: type.substring(1, closeSquareBracketIdx),
            required: required,
        };
    }
    var hasSubType = true;
    var openAngleBracketIdx = type.indexOf("<");
    var closeAngleBracketIdx = type.lastIndexOf(">");
    if ((openAngleBracketIdx === -1 && closeAngleBracketIdx !== -1) ||
        (openAngleBracketIdx !== -1 && closeAngleBracketIdx === -1)) {
        throw new Error("Invalid map value type: ".concat(rootType));
    }
    if (openAngleBracketIdx === -1 && closeAngleBracketIdx === -1) {
        if (type === "Array" || type === "Map") {
            throw new Error("Invalid map value type: ".concat(rootType));
        }
        if (type.endsWith("!")) {
            required = true;
        }
        hasSubType = false;
    }
    if (type[closeAngleBracketIdx + 1] === "!") {
        required = true;
    }
    return {
        currentType: hasSubType
            ? type.substring(0, openAngleBracketIdx)
            : required
                ? type.substring(0, type.length - 1)
                : type,
        subType: hasSubType
            ? type.substring(openAngleBracketIdx + 1, closeAngleBracketIdx)
            : undefined,
        required: required,
    };
};
var _toGraphQLType = function (rootType, type) {
    var parsedCurrentType = _parseCurrentType(rootType, type);
    var subType = parsedCurrentType.subType;
    var currentType = parsedCurrentType.currentType;
    if (!subType) {
        return currentType;
    }
    switch (currentType) {
        case "Array": {
            if (subType.endsWith("!")) {
                subType = subType.slice(0, -1);
            }
            return "[".concat(_toGraphQLType(rootType, subType), "]");
        }
        case "Map": {
            var firstDelimiter = subType.indexOf(",");
            var keyType = subType.substring(0, firstDelimiter).trim();
            var valType = subType.substring(firstDelimiter + 1).trim();
            return "Map<".concat(_toGraphQLType(rootType, keyType), ", ").concat(_toGraphQLType(rootType, valType), ">");
        }
        default:
            throw new Error("Found unknown type ".concat(currentType, " while parsing ").concat(rootType));
    }
};
var _parseMapType = function (rootType, type, name) {
    var _a = _parseCurrentType(rootType, type), currentType = _a.currentType, subType = _a.subType, required = _a.required;
    if (!subType) {
        if ((0, __1.isScalarType)(currentType)) {
            return (0, __1.createScalarDefinition)({
                name: name,
                type: currentType,
                required: required,
            });
        }
        return (0, __1.createUnresolvedObjectOrEnumRef)({
            name: name,
            type: currentType,
            required: required,
        });
    }
    switch (currentType) {
        case "Array": {
            return (0, __1.createArrayDefinition)({
                name: name,
                type: _toGraphQLType(rootType, type),
                item: _parseMapType(rootType, subType, name),
                required: required,
            });
        }
        case "Map": {
            var firstDelimiter = subType.indexOf(",");
            var _keyType = subType.substring(0, firstDelimiter).trim();
            var valType = subType.substring(firstDelimiter + 1).trim();
            if (!_keyType || !valType) {
                throw new Error("Invalid map value type: ".concat(rootType));
            }
            // TODO: Is there a better way to enforce this -> Map key should always be required
            // TODO: Should we throw an error if it's not?
            var keyRequired = true;
            var keyType = _keyType.endsWith("!") ? _keyType.slice(0, -1) : _keyType;
            if (!(0, __1.isMapKeyType)(keyType)) {
                throw new Error("Found invalid map key type: ".concat(keyType, " while parsing ").concat(rootType));
            }
            return (0, __1.createMapDefinition)({
                type: _toGraphQLType(rootType, type),
                name: name,
                key: (0, __1.createMapKeyDefinition)({
                    name: name,
                    type: keyType,
                    required: keyRequired,
                }),
                value: _parseMapType(rootType, valType, name),
                required: required,
            });
        }
        default:
            throw new Error("Invalid map value type: ".concat(type));
    }
};
function parseCurrentType(type) {
    return _parseCurrentType(type, type);
}
exports.parseCurrentType = parseCurrentType;
function parseMapType(type, name) {
    return _parseMapType(type, type, name);
}
exports.parseMapType = parseMapType;
function toGraphQLType(type) {
    return _toGraphQLType(type, type);
}
exports.toGraphQLType = toGraphQLType;
//# sourceMappingURL=map-utils.js.map