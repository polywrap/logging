import { IFileReader } from "./IFileReader";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
import { CoreClient, GetFileOptions, GetManifestOptions, InvocableResult, InvokeOptions, Wrapper, IUriResolutionContext } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
export interface State {
    method: string;
    args: Uint8Array;
    invoke: {
        result?: Uint8Array;
        error?: string;
    };
    subinvoke: {
        result?: Uint8Array;
        error?: string;
        args: unknown[];
    };
    subinvokeImplementation: {
        result?: Uint8Array;
        error?: string;
        args: unknown[];
    };
    invokeResult?: Result<unknown>;
    getImplementationsResult?: Uint8Array;
    env: Uint8Array;
    resolutionContext?: IUriResolutionContext;
}
export declare class WasmWrapper implements Wrapper {
    private _manifest;
    private _fileReader;
    static requiredExports: readonly string[];
    private _wasmModule?;
    constructor(_manifest: WrapManifest, _fileReader: IFileReader);
    static from(manifestBuffer: Uint8Array, wasmModule: Uint8Array, options?: GetManifestOptions): Promise<WasmWrapper>;
    static from(manifestBuffer: Uint8Array, wasmModule: Uint8Array, fileReader: IFileReader, options?: GetManifestOptions): Promise<WasmWrapper>;
    static from(manifestBuffer: Uint8Array, fileReader: IFileReader, options?: GetManifestOptions): Promise<WasmWrapper>;
    static from(fileReader: IFileReader, options?: GetManifestOptions): Promise<WasmWrapper>;
    getFile(options: GetFileOptions): Promise<Result<Uint8Array | string, Error>>;
    getManifest(): WrapManifest;
    invoke(options: InvokeOptions, client: CoreClient): Promise<InvocableResult<Uint8Array>>;
    private static _decodeArgs;
    private _processInvokeResult;
    private _getWasmModule;
}
