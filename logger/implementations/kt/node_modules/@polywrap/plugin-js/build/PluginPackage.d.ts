import { PluginModule } from "./PluginModule";
import { GetPluginMethodsFunc } from "./utils";
import { IWrapPackage, Wrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
export declare class PluginPackage<TConfig, TEnv extends Record<string, unknown> = Record<string, unknown>> implements IWrapPackage {
    private _pluginModule;
    private _manifest;
    constructor(_pluginModule: PluginModule<TConfig, TEnv>, _manifest: WrapManifest);
    static from<TConfig, TEnv extends Record<string, unknown> = Record<string, unknown>>(pluginModule: PluginModule<TConfig, TEnv>, manifest?: WrapManifest): PluginPackage<TConfig, TEnv>;
    static from<TEnv extends Record<string, unknown> = Record<string, unknown>>(getPluginFuncs: GetPluginMethodsFunc<TEnv>, manifest?: WrapManifest): PluginPackage<never, TEnv>;
    getManifest(): Promise<Result<WrapManifest, Error>>;
    createWrapper(): Promise<Result<Wrapper, Error>>;
}
