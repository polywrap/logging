import { Wrapper, CoreClient, GetFileOptions, WrapError, IUriResolutionContext, CoreClientConfig, GetImplementationsOptions, IUriResolver, InvokeResult, InvokerOptions, ReadonlyUriMap, TryResolveUriOptions, Uri, UriPackageOrWrapper, WrapperEnv } from "@polywrap/core-js";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
import { Result } from "@polywrap/result";
export declare class ResolutionContextOverrideClient implements CoreClient {
    private readonly _client;
    private readonly _resolutionContext?;
    constructor(_client: CoreClient, _resolutionContext?: IUriResolutionContext | undefined);
    getConfig(): CoreClientConfig;
    getInterfaces(): ReadonlyUriMap<readonly Uri[]> | undefined;
    getEnvs(): ReadonlyUriMap<WrapperEnv> | undefined;
    getResolver(): IUriResolver<unknown>;
    getEnvByUri(uri: Uri): WrapperEnv | undefined;
    getManifest(uri: Uri): Promise<Result<WrapManifest, WrapError>>;
    getFile(uri: Uri, options: GetFileOptions): Promise<Result<string | Uint8Array, WrapError>>;
    getImplementations(uri: Uri, options?: GetImplementationsOptions): Promise<Result<Uri[], WrapError>>;
    invokeWrapper<TData = unknown>(options: InvokerOptions & {
        wrapper: Wrapper;
    }): Promise<InvokeResult<TData>>;
    invoke<TData = unknown>(options: InvokerOptions): Promise<InvokeResult<TData>>;
    tryResolveUri(options: TryResolveUriOptions): Promise<Result<UriPackageOrWrapper, unknown>>;
}
