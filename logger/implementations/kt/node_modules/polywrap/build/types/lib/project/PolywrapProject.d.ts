import { Project, ProjectConfig } from ".";
import { PolywrapManifestLanguage } from "./manifests";
import { BuildManifest, PolywrapManifest } from "@polywrap/polywrap-manifest-types-js";
import { BindOutput } from "@polywrap/schema-bind";
import { WrapAbi } from "@polywrap/schema-parse";
export interface PolywrapProjectConfig extends ProjectConfig {
    polywrapManifestPath: string;
    buildManifestPath?: string;
}
export interface BuildManifestConfig {
    [k: string]: unknown;
    polywrap_module?: {
        name: string;
        dir: string;
    };
    polywrap_linked_packages?: {
        dir: string;
        name: string;
    }[];
    polywrap_manifests: string[];
    include?: string[];
}
export declare class PolywrapProject extends Project<PolywrapManifest> {
    protected _config: PolywrapProjectConfig;
    static cacheLayout: {
        root: string;
        buildStrategyUsed: string;
        buildDir: string;
        buildUuidFile: string;
        buildProjectDir: string;
        buildLinkedPackagesDir: string;
    };
    private _polywrapManifest;
    private _buildManifest;
    constructor(_config: PolywrapProjectConfig);
    getCachePath(subpath: string): string;
    reset(): void;
    validate(): Promise<void>;
    getName(): Promise<string>;
    getManifest(): Promise<PolywrapManifest>;
    getManifestDir(): string;
    getManifestPath(): string;
    getManifestLanguage(): Promise<PolywrapManifestLanguage>;
    getSchemaNamedPath(): Promise<string>;
    getImportAbis(): Promise<PolywrapManifest["source"]["import_abis"]>;
    getGenerationDirectory(generationSubPath?: string): Promise<string>;
    generateSchemaBindings(abi: WrapAbi, generationSubPath?: string, bindgenUri?: string, bindConfig?: Record<string, unknown>): Promise<BindOutput>;
    getBuildManifestPath(): Promise<string | undefined>;
    getBuildManifest(): Promise<BuildManifest>;
    getBuildUuid(): Promise<string>;
    cacheBuildManifestLinkedPackages(): Promise<void>;
    getManifestPaths(absolute?: boolean): Promise<string[]>;
    private _getModule;
    private _getGenerationDirectory;
}
