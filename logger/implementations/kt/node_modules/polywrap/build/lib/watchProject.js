"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchProject = void 0;
var intl_1 = require("./intl");
var system_1 = require("./system");
var readline_1 = __importDefault(require("readline"));
function watchProject(options) {
    return __awaiter(this, void 0, void 0, function () {
        var execute, logger, project, ignored, keyPressListener, watcher;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    execute = options.execute, logger = options.logger, project = options.project, ignored = options.ignored;
                    // Execute
                    return [4 /*yield*/, execute()];
                case 1:
                    // Execute
                    _a.sent();
                    keyPressListener = function () {
                        // Watch for escape key presses
                        logger.info("".concat(intl_1.intlMsg.commands_build_keypressListener_watching(), ": ").concat(project.getManifestDir()));
                        logger.info(intl_1.intlMsg.commands_build_keypressListener_exit());
                        readline_1.default.emitKeypressEvents(process.stdin);
                        process.stdin.on("keypress", function (str, key) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(key.name == "escape" ||
                                            key.name == "q" ||
                                            (key.name == "c" && key.ctrl))) return [3 /*break*/, 2];
                                        return [4 /*yield*/, watcher.stop()];
                                    case 1:
                                        _a.sent();
                                        process.kill(process.pid, "SIGINT");
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); });
                        if (process.stdin.setRawMode) {
                            process.stdin.setRawMode(true);
                        }
                        process.stdin.resume();
                    };
                    keyPressListener();
                    watcher = new system_1.Watcher();
                    watcher.start(project.getManifestDir(), {
                        ignored: ignored,
                        ignoreInitial: true,
                        execute: function (events) { return __awaiter(_this, void 0, void 0, function () {
                            var events_1, events_1_1, event_1;
                            var e_1, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        try {
                                            // Log all of the events encountered
                                            for (events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                                                event_1 = events_1_1.value;
                                                logger.info("".concat((0, system_1.watchEventName)(event_1.type), ": ").concat(event_1.path));
                                            }
                                        }
                                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                        finally {
                                            try {
                                                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                                            }
                                            finally { if (e_1) throw e_1.error; }
                                        }
                                        // Execute the build
                                        return [4 /*yield*/, execute()];
                                    case 1:
                                        // Execute the build
                                        _b.sent();
                                        // Process key presses
                                        keyPressListener();
                                        return [2 /*return*/];
                                }
                            });
                        }); },
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.watchProject = watchProject;
//# sourceMappingURL=watchProject.js.map