"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerVMBuildStrategy = void 0;
var system_1 = require("../../system");
var BuildStrategy_1 = require("../BuildStrategy");
var intl_1 = require("../../intl");
var project_1 = require("../../project");
var logging_1 = require("../../logging");
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var mustache_1 = __importDefault(require("mustache"));
var DEFAULTS_DIR = path_1.default.join(__dirname, "..", "..", "defaults", "build-strategies");
var CONFIGS = {
    "wasm/rust": {
        defaultIncludes: ["Cargo.toml", "Cargo.lock"],
        baseImage: "polywrap/vm-base-rs",
        version: "0.2.1",
    },
    "wasm/assemblyscript": {
        defaultIncludes: ["package.json", "package-lock.json", "yarn.lock"],
        baseImage: "polywrap/vm-base-as",
        version: "0.2.0",
    },
    "wasm/golang": {
        defaultIncludes: ["go.mod", "go.sum"],
        baseImage: "polywrap/vm-base-go",
        version: "0.1.6",
    },
};
var DockerVMBuildStrategy = /** @class */ (function (_super) {
    __extends(DockerVMBuildStrategy, _super);
    function DockerVMBuildStrategy(config) {
        var _this = _super.call(this, config) || this;
        if (!(0, system_1.isDockerInstalled)(_this.project.logger)) {
            throw new Error(intl_1.intlMsg.lib_docker_noInstall());
        }
        _this._volumePaths = {
            project: _this.project.getCachePath(project_1.PolywrapProject.cacheLayout.buildProjectDir),
            linkedPackages: _this.project.getCachePath(project_1.PolywrapProject.cacheLayout.buildLinkedPackagesDir),
        };
        return _this;
    }
    DockerVMBuildStrategy.prototype.getStrategyName = function () {
        return "vm";
    };
    DockerVMBuildStrategy.prototype.buildSources = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, system_1.ensureDockerDaemonRunning)(this.project.logger)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._buildSources()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._copyBuildOutput()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DockerVMBuildStrategy.prototype._buildSources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var run;
            var _this = this;
            return __generator(this, function (_a) {
                run = function () { return __awaiter(_this, void 0, void 0, function () {
                    var manifestDir, buildManifest, buildManifestConfig, language, sourcesSubDirectory, scriptTemplate, scriptContent, buildScriptPath, localCargoCache, cacheVolumes, buildError, buildDir, e_1;
                    var _this = this;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                manifestDir = this.project.getManifestDir();
                                return [4 /*yield*/, this.project.getBuildManifest()];
                            case 1:
                                buildManifest = _b.sent();
                                buildManifestConfig = buildManifest.config;
                                // Copy manifests
                                buildManifestConfig.polywrap_manifests.forEach(function (manifestPath) {
                                    fs_extra_1.default.copySync(path_1.default.join(manifestDir, manifestPath), path_1.default.join(_this._volumePaths.project, manifestPath));
                                });
                                return [4 /*yield*/, this.project.getManifestLanguage()];
                            case 2:
                                language = (_b.sent());
                                if (!buildManifestConfig.polywrap_linked_packages) return [3 /*break*/, 4];
                                if (fs_extra_1.default.existsSync(this._volumePaths.linkedPackages)) {
                                    fs_extra_1.default.removeSync(this._volumePaths.linkedPackages);
                                }
                                return [4 /*yield*/, this.project.cacheBuildManifestLinkedPackages()];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                // Copy additional includes
                                CONFIGS[language].defaultIncludes.forEach(function (include) {
                                    if (fs_extra_1.default.existsSync(path_1.default.join(manifestDir, include))) {
                                        if (fs_extra_1.default.existsSync(path_1.default.join(_this._volumePaths.project, include))) {
                                            fs_extra_1.default.removeSync(path_1.default.join(_this._volumePaths.project, include));
                                        }
                                        fs_extra_1.default.copySync(path_1.default.join(manifestDir, include), path_1.default.join(_this._volumePaths.project, include));
                                    }
                                });
                                // Copy includes
                                if (buildManifestConfig.include) {
                                    buildManifestConfig.include.forEach(function (includePath) {
                                        fs_extra_1.default.copySync(path_1.default.join(manifestDir, includePath), path_1.default.join(_this._volumePaths.project, includePath), {
                                            overwrite: false,
                                        });
                                    });
                                }
                                if (!buildManifestConfig.polywrap_module) return [3 /*break*/, 10];
                                sourcesSubDirectory = ((_a = this.overrides) === null || _a === void 0 ? void 0 : _a.sourcesSubDirectory) ||
                                    buildManifestConfig.polywrap_module.dir;
                                fs_extra_1.default.copySync(path_1.default.join(manifestDir, sourcesSubDirectory), path_1.default.join(this._volumePaths.project, sourcesSubDirectory));
                                scriptTemplate = fs_extra_1.default.readFileSync(path_1.default.join(DEFAULTS_DIR, language, this.getStrategyName(), "vm-script.mustache"), "utf8");
                                scriptContent = mustache_1.default.render(scriptTemplate, buildManifestConfig);
                                buildScriptPath = path_1.default.join(this._volumePaths.project, "polywrap-build.sh");
                                if (fs_extra_1.default.existsSync(buildScriptPath)) {
                                    fs_extra_1.default.removeSync(buildScriptPath);
                                }
                                fs_extra_1.default.writeFileSync(buildScriptPath, scriptContent, {
                                    mode: "777",
                                    flag: "wx",
                                });
                                localCargoCache = "".concat(process.env.HOME, "/.cargo");
                                cacheVolumes = [];
                                if (language === "wasm/rust" && fs_extra_1.default.existsSync(localCargoCache)) {
                                    cacheVolumes.push("-v ".concat(localCargoCache, ":/usr/local/cargo"));
                                    // Ignore the bin folder, without this an exception is thrown upon exe exec
                                    cacheVolumes.push("-v /usr/local/cargo/bin/");
                                }
                                buildError = undefined;
                                _b.label = 5;
                            case 5:
                                _b.trys.push([5, 8, , 9]);
                                return [4 /*yield*/, (0, system_1.runCommand)("docker", __spreadArray(__spreadArray([
                                        "run",
                                        "--rm",
                                        "-v",
                                        "".concat(path_1.default.resolve(this._volumePaths.project), ":/project"),
                                        "-v",
                                        "".concat(path_1.default.resolve(this._volumePaths.linkedPackages), ":/linked-packages")
                                    ], __read(cacheVolumes), false), [
                                        "".concat(CONFIGS[language].baseImage, ":").concat(CONFIGS[language].version),
                                        "/bin/bash",
                                        "--verbose",
                                        "/project/polywrap-build.sh",
                                    ], false), this.project.logger, undefined, undefined, true)];
                            case 6:
                                _b.sent();
                                buildDir = path_1.default.join(this._volumePaths.project, "build");
                                if (!fs_extra_1.default.existsSync(buildDir)) {
                                    buildError = new Error("Build directory missing.");
                                }
                                return [4 /*yield*/, (0, system_1.runCommand)("docker", [
                                        "run",
                                        "--rm",
                                        "-v",
                                        "".concat(path_1.default.resolve(this._volumePaths.project), ":/project"),
                                        "-v",
                                        "".concat(path_1.default.resolve(this._volumePaths.linkedPackages), ":/linked-packages"),
                                        "".concat(CONFIGS[language].baseImage, ":").concat(CONFIGS[language].version),
                                        "/bin/bash",
                                        "-c",
                                        '"chmod -R 777 /project && chmod -R 777 /linked-packages"',
                                    ], this.project.logger)];
                            case 7:
                                _b.sent();
                                return [3 /*break*/, 9];
                            case 8:
                                e_1 = _b.sent();
                                buildError = e_1;
                                return [3 /*break*/, 9];
                            case 9:
                                if (buildError) {
                                    throw buildError;
                                }
                                _b.label = 10;
                            case 10: return [2 /*return*/];
                        }
                    });
                }); };
                return [2 /*return*/, run()];
            });
        });
    };
    DockerVMBuildStrategy.prototype._copyBuildOutput = function () {
        return __awaiter(this, void 0, void 0, function () {
            var run, args;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        run = function () {
                            fs_extra_1.default.copySync(path_1.default.join(_this._volumePaths.project, "build"), _this.outputDir);
                        };
                        args = {
                            path: (0, system_1.displayPath)(this.outputDir),
                        };
                        return [4 /*yield*/, (0, logging_1.logActivity)(this.project.logger, intl_1.intlMsg.lib_helpers_copyText(args), intl_1.intlMsg.lib_helpers_copyError(args), intl_1.intlMsg.lib_helpers_copyWarning(args), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    run();
                                    return [2 /*return*/];
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DockerVMBuildStrategy;
}(BuildStrategy_1.BuildStrategy));
exports.DockerVMBuildStrategy = DockerVMBuildStrategy;
//# sourceMappingURL=DockerVMStrategy.js.map