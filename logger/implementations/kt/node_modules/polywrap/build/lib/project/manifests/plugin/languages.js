"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginManifestOverrideCodegenDir = exports.pluginManifestLanguageToBindLanguage = exports.isPluginManifestLanguage = exports.pluginManifestLanguages = void 0;
var intl_1 = require("../../../intl");
exports.pluginManifestLanguages = {
    "plugin/typescript": "plugin/typescript",
    "plugin/rust": "plugin/rust",
    "plugin/python": "plugin/python",
    "plugin/kotlin": "plugin/kotlin",
    "plugin/swift": "plugin/swift",
};
function isPluginManifestLanguage(language) {
    return language in exports.pluginManifestLanguages;
}
exports.isPluginManifestLanguage = isPluginManifestLanguage;
function pluginManifestLanguageToBindLanguage(manifestLanguage) {
    switch (manifestLanguage) {
        case "plugin/typescript":
            return "plugin-ts";
        case "plugin/rust":
            return "plugin-rs";
        case "plugin/python":
            return "plugin-py";
        case "plugin/kotlin":
            return "plugin-kt";
        case "plugin/swift":
            return "plugin-swift";
        default:
            throw Error(intl_1.intlMsg.lib_language_unsupportedManifestLanguage({
                language: manifestLanguage,
                supported: Object.keys(exports.pluginManifestLanguages).join(", "),
            }));
    }
}
exports.pluginManifestLanguageToBindLanguage = pluginManifestLanguageToBindLanguage;
// By default, codegen is placed in a directory next to the
// `module:` file, specified within the project manifest source section.
function pluginManifestOverrideCodegenDir(manifestLanguage) {
    switch (manifestLanguage) {
        // For rust, `module:` is set to `Cargo.toml`, so we override
        // the codegen directory to be `./src/wrap`
        case "plugin/rust":
            return "./src/wrap";
        default:
            return undefined;
    }
}
exports.pluginManifestOverrideCodegenDir = pluginManifestOverrideCodegenDir;
//# sourceMappingURL=languages.js.map