"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.polywrapManifestOverrideCodegenDir = exports.polywrapManifestLanguageToBindLanguage = exports.isPolywrapManifestLanguage = exports.polywrapManifestLanguages = void 0;
var intl_1 = require("../../../intl");
exports.polywrapManifestLanguages = {
    "wasm/assemblyscript": "wasm/assemblyscript",
    "wasm/rust": "wasm/rust",
    "wasm/golang": "wasm/golang",
    interface: "interface",
};
function isPolywrapManifestLanguage(language) {
    return language in exports.polywrapManifestLanguages;
}
exports.isPolywrapManifestLanguage = isPolywrapManifestLanguage;
function polywrapManifestLanguageToBindLanguage(manifestLanguage) {
    switch (manifestLanguage) {
        case "wasm/assemblyscript":
            return "wrap-as";
        case "wasm/rust":
            return "wrap-rs";
        case "wasm/golang":
            return "wrap-go";
        case "interface":
            throw Error(intl_1.intlMsg.lib_language_noInterfaceCodegen());
        default:
            throw Error(intl_1.intlMsg.lib_language_unsupportedManifestLanguage({
                language: manifestLanguage,
                supported: Object.keys(exports.polywrapManifestLanguages).join(", "),
            }));
    }
}
exports.polywrapManifestLanguageToBindLanguage = polywrapManifestLanguageToBindLanguage;
// By default, codegen is placed in a directory next to the
// `module:` file, specified within the project manifest source section.
function polywrapManifestOverrideCodegenDir(manifestLanguage) {
    switch (manifestLanguage) {
        // For rust, `module:` is set to `Cargo.toml`, so we override
        // the codegen directory to be `./src/wrap`
        case "wasm/rust":
            return "./src/wrap";
        case "wasm/golang":
            return "./module/wrap";
        default:
            return undefined;
    }
}
exports.polywrapManifestOverrideCodegenDir = polywrapManifestOverrideCodegenDir;
//# sourceMappingURL=languages.js.map