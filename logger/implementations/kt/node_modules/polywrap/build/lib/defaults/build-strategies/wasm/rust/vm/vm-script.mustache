set -e

{{#polywrap_linked_packages.length}}
# Link any local packages
{{#polywrap_linked_packages}}
toml set ./{{#polywrap_module}}{{dir}}{{/polywrap_module}}/Cargo.toml dependencies.{{name}}.path /linked-packages/{{name}} > ./{{#polywrap_module}}{{dir}}{{/polywrap_module}}/Cargo-local.toml
  rm -rf ./{{#polywrap_module}}{{dir}}{{/polywrap_module}}/Cargo.toml
  mv ./{{#polywrap_module}}{{dir}}{{/polywrap_module}}/Cargo-local.toml ./{{#polywrap_module}}{{dir}}{{/polywrap_module}}/Cargo.toml
{{/polywrap_linked_packages}}
{{/polywrap_linked_packages.length}}

{{#polywrap_module}}
# Ensure the module at {{dir}} has the crate-type = ["cdylib"]
toml set ./{{dir}}/Cargo.toml lib.crate-type ["cdylib"] > ./{{dir}}/Cargo-local.toml
rm -rf ./{{dir}}/Cargo.toml
mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml

# Clean up artifacts left by the toml CLI program ("["cdylib"]" -> ["cdylib"])
sed -i 's/\"\[cdylib\]\"/\[\"cdylib\"\]/g' ./{{dir}}/Cargo.toml

# Ensure the package name = "module"
toml set ./{{dir}}/Cargo.toml package.name "module" > ./{{dir}}/Cargo-local.toml
rm -rf ./{{dir}}/Cargo.toml
mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml

# Build the module
cargo build --manifest-path ./{{dir}}/Cargo.toml \
    --target wasm32-unknown-unknown --release

# Make the build & build-staging directory
rm -rf ./build
mkdir ./build
rm -rf ./build-staging
mkdir ./build-staging

# Move the rust module into the staging directory
mv ./{{dir}}/target/wasm32-unknown-unknown/release/module.wasm ./build-staging/module.wasm

# Wasm Post-processing

# 1. Run `wasm-bindgen` over the module, replacing all placeholder __wbindgen_... imports
wasm-bindgen ./build-staging/module.wasm --out-dir ./build-staging --out-name module_bg.wasm

# 2. If wasm-bindgen isn't being used, the only import that will be remaining will be __wbindgen_throw.
# So, let's remove this, and if more extraneous imports exist an error will be raised post-compilation
wasm-snip ./build-staging/module_bg.wasm -o ./build-staging/module_bg_snip.wasm -p .*__wbindgen_throw

# 3. Run `wasm-tools strip` to remove the wasm-interface-types custom section (sometimes get injected)
wasm-tools strip ./build-staging/module_bg_snip.wasm -d wasm-interface-types -o ./build-staging/module_bg_snip_strip.wasm

# 4. Use wasm-opt to perform the "asyncify" post-processing step over all modules
export ASYNCIFY_STACK_SIZE=24576
wasm-opt --asyncify -Os ./build-staging/module_bg_snip_strip.wasm -o ./build-staging/module_bg_snip_strip_opt.wasm

# Finish - Move the result
mv ./build-staging/module_bg_snip_strip_opt.wasm ./build/wrap.wasm

{{/polywrap_module}}
