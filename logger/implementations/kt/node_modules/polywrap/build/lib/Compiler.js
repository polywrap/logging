"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-empty-function */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
var _1 = require("./");
var wasm_js_1 = require("@polywrap/wasm-js");
var asyncify_js_1 = require("@polywrap/asyncify-js");
var os_js_1 = require("@polywrap/os-js");
var fs_1 = __importDefault(require("fs"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var Compiler = /** @class */ (function () {
    function Compiler(_config) {
        this._config = _config;
    }
    Compiler.prototype.compile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, run, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var buildModules, emitResourcesAndDocs, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        // Init & clean output directory
                                        (0, _1.resetDir)(this._config.outputDir);
                                        // Output: wrap.info
                                        return [4 /*yield*/, this._outputWrapManifest()];
                                    case 1:
                                        // Output: wrap.info
                                        _b.sent();
                                        return [4 /*yield*/, this._isWasm()];
                                    case 2:
                                        buildModules = _b.sent();
                                        _a = buildModules;
                                        if (_a) return [3 /*break*/, 4];
                                        return [4 /*yield*/, this._isInterface()];
                                    case 3:
                                        _a = (_b.sent());
                                        _b.label = 4;
                                    case 4:
                                        emitResourcesAndDocs = _a;
                                        if (!buildModules) return [3 /*break*/, 6];
                                        // Build & Output: wasm.wrap
                                        return [4 /*yield*/, this._buildModules()];
                                    case 5:
                                        // Build & Output: wasm.wrap
                                        _b.sent();
                                        _b.label = 6;
                                    case 6:
                                        if (!emitResourcesAndDocs) return [3 /*break*/, 9];
                                        // Copy: Resources folder
                                        return [4 /*yield*/, this._copyResourcesFolder()];
                                    case 7:
                                        // Copy: Resources folder
                                        _b.sent();
                                        // Output docs if any
                                        return [4 /*yield*/, this._maybeAssembleDocsDir()];
                                    case 8:
                                        // Output docs if any
                                        _b.sent();
                                        _b.label = 9;
                                    case 9: return [2 /*return*/];
                                }
                            });
                        }); };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, _1.logActivity)(project.logger, _1.intlMsg.lib_compiler_compileText(), _1.intlMsg.lib_compiler_compileError(), _1.intlMsg.lib_compiler_compileWarning(), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, run()];
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._isWasm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        return [2 /*return*/, manifest.project.type.startsWith("wasm/")];
                }
            });
        });
    };
    Compiler.prototype._isInterface = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        project = this._config.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        return [2 /*return*/, manifest.project.type === "interface"];
                }
            });
        });
    };
    Compiler.prototype._buildModules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, outputDir, project, manifest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._config, outputDir = _a.outputDir, project = _a.project;
                        if (!this._config.buildStrategy) {
                            throw Error(_1.intlMsg.lib_compiler_missingBuildStrategy());
                        }
                        return [4 /*yield*/, this._isWasm()];
                    case 1:
                        if (!!(_b.sent())) return [3 /*break*/, 3];
                        return [4 /*yield*/, project.getManifest()];
                    case 2:
                        manifest = _b.sent();
                        throw Error(_1.intlMsg.lib_compiler_cannotBuildModule({
                            project: manifest.project.type,
                        }));
                    case 3: 
                    // Build the sources
                    return [4 /*yield*/, this._config.buildStrategy.build()];
                    case 4:
                        // Build the sources
                        _b.sent();
                        // Validate the Wasm module
                        return [4 /*yield*/, this._validateWasmModule(outputDir)];
                    case 5:
                        // Validate the Wasm module
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._outputWrapManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, outputDir, project, schemaComposer, manifestPath, run, displayManifestPath;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._config, outputDir = _a.outputDir, project = _a.project, schemaComposer = _a.schemaComposer;
                        manifestPath = "".concat(outputDir, "/wrap.info");
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var manifest, type, abi;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, project.getManifest()];
                                    case 1:
                                        manifest = _a.sent();
                                        type = manifest.project.type.split("/")[0];
                                        return [4 /*yield*/, schemaComposer.getComposedAbis()];
                                    case 2:
                                        abi = _a.sent();
                                        return [4 /*yield*/, (0, _1.generateWrapFile)(abi, manifest.project.name, type, manifestPath, project.logger)];
                                    case 3:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        displayManifestPath = (0, _1.displayPath)(manifestPath);
                        return [4 /*yield*/, (0, _1.logActivity)(project.logger, _1.intlMsg.lib_helpers_wrap_manifest_outputText({
                                path: (0, os_js_1.normalizePath)(displayManifestPath),
                            }), _1.intlMsg.lib_helpers_wrap_manifest_outputError({
                                path: (0, os_js_1.normalizePath)(displayManifestPath),
                            }), _1.intlMsg.lib_helpers_wrap_manifest_outputWarning({
                                path: (0, os_js_1.normalizePath)(displayManifestPath),
                            }), function () {
                                return Promise.resolve(run());
                            })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Compiler.prototype._copyResourcesFolder = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, outputDir, project, projectManifest, logger, folder, folderPath;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._config, outputDir = _a.outputDir, project = _a.project;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        projectManifest = _b.sent();
                        if (!projectManifest || !projectManifest.resources) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        logger = project.logger;
                        folder = projectManifest.resources;
                        folderPath = path_1.default.resolve(projectManifest.resources);
                        return [4 /*yield*/, (0, _1.logActivity)(logger, _1.intlMsg.lib_compiler_copyResourcesFolderText({ folder: folder }), _1.intlMsg.lib_compiler_copyResourcesFolderError({ folder: folder }), _1.intlMsg.lib_compiler_copyResourcesFolderWarning({ folder: folder }), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!fs_1.default.existsSync(folderPath)) {
                                                throw Error("Resource can't be found.");
                                            }
                                            return [4 /*yield*/, fs_extra_1.default.copy(folderPath, outputDir, { recursive: true })];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._maybeAssembleDocsDir = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, project, outputDir, projectManifest, docsManifest, docsDir, outputLogoPath, logoFileParsed, logoOutputPath, outputReadmePath, readmesDir, pageFileParsed, pageOutputPath, outputDocsManifest, cleanedDocsManifest;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = this._config, project = _b.project, outputDir = _b.outputDir;
                        return [4 /*yield*/, project.getManifest()];
                    case 1:
                        projectManifest = _c.sent();
                        if (!((_a = projectManifest.extensions) === null || _a === void 0 ? void 0 : _a.docs)) return [3 /*break*/, 12];
                        return [4 /*yield*/, (0, _1.loadDocsManifest)(projectManifest.extensions.docs, project.logger)];
                    case 2:
                        docsManifest = _c.sent();
                        docsDir = path_1.default.join(outputDir, "docs");
                        if (!fs_extra_1.default.existsSync(docsDir)) return [3 /*break*/, 4];
                        return [4 /*yield*/, fs_extra_1.default.rmdir(docsDir)];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [4 /*yield*/, fs_extra_1.default.mkdir(docsDir)];
                    case 5:
                        _c.sent();
                        outputLogoPath = void 0;
                        if (!docsManifest.logo) return [3 /*break*/, 7];
                        logoFileParsed = path_1.default.parse(docsManifest.logo);
                        logoOutputPath = path_1.default.join(docsDir, "logo".concat(logoFileParsed.ext));
                        return [4 /*yield*/, fs_extra_1.default.copyFile(docsManifest.logo, logoOutputPath)];
                    case 6:
                        _c.sent();
                        outputLogoPath = path_1.default.relative(docsDir, logoOutputPath);
                        _c.label = 7;
                    case 7:
                        outputReadmePath = void 0;
                        if (!docsManifest.readme) return [3 /*break*/, 10];
                        readmesDir = path_1.default.join(docsDir, "pages");
                        return [4 /*yield*/, fs_extra_1.default.mkdir(readmesDir)];
                    case 8:
                        _c.sent();
                        pageFileParsed = path_1.default.parse(docsManifest.readme);
                        pageOutputPath = path_1.default.join(readmesDir, pageFileParsed.base);
                        return [4 /*yield*/, fs_extra_1.default.copyFile(docsManifest.readme, pageOutputPath)];
                    case 9:
                        _c.sent();
                        outputReadmePath = path_1.default.relative(docsDir, pageOutputPath);
                        _c.label = 10;
                    case 10:
                        outputDocsManifest = __assign(__assign({}, docsManifest), { logo: outputLogoPath, readme: outputReadmePath, __type: "DocsManifest" });
                        cleanedDocsManifest = JSON.parse(JSON.stringify(outputDocsManifest));
                        delete cleanedDocsManifest.__type;
                        return [4 /*yield*/, fs_extra_1.default.writeFile(path_1.default.join(docsDir, "polywrap.docs.json"), JSON.stringify(cleanedDocsManifest))];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    Compiler.prototype._validateWasmModule = function (buildDir) {
        return __awaiter(this, void 0, void 0, function () {
            var modulePath, wasmSource, wrapImports, memory, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modulePath = path_1.default.join(buildDir, "wrap.wasm");
                        wasmSource = fs_1.default.readFileSync(modulePath);
                        wrapImports = {
                            __wrap_subinvoke: function () { },
                            __wrap_subinvoke_result_len: function () { },
                            __wrap_subinvoke_result: function () { },
                            __wrap_subinvoke_error_len: function () { },
                            __wrap_subinvoke_error: function () { },
                            __wrap_subinvokeImplementation: function () { },
                            __wrap_subinvokeImplementation_result_len: function () { },
                            __wrap_subinvokeImplementation_result: function () { },
                            __wrap_subinvokeImplementation_error_len: function () { },
                            __wrap_subinvokeImplementation_error: function () { },
                            __wrap_invoke_args: function () { },
                            __wrap_invoke_result: function () { },
                            __wrap_invoke_error: function () { },
                            __wrap_getImplementations: function () { },
                            __wrap_getImplementations_result_len: function () { },
                            __wrap_getImplementations_result: function () { },
                            __wrap_abort: function () { },
                            __wrap_debug_log: function () { },
                            __wrap_load_env: function () { },
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        memory = asyncify_js_1.AsyncWasmInstance.createMemory({ module: wasmSource });
                        return [4 /*yield*/, asyncify_js_1.AsyncWasmInstance.createInstance({
                                module: wasmSource,
                                imports: {
                                    env: {
                                        memory: memory,
                                    },
                                    wrap: wrapImports,
                                },
                                requiredExports: wasm_js_1.WasmWrapper.requiredExports,
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        throw Error(_1.intlMsg.lib_compiler_invalid_module({
                            modulePath: modulePath,
                            error: error_1,
                        }));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return Compiler;
}());
exports.Compiler = Compiler;
//# sourceMappingURL=Compiler.js.map