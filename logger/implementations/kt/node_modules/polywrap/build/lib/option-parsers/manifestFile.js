"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseManifestFileOption = void 0;
var intl_1 = require("../intl");
var project_1 = require("../project");
var system_1 = require("../system");
var path_1 = __importDefault(require("path"));
var deprecatedDefaultManifests = __spreadArray(__spreadArray([], __read(project_1.defaultAppManifest), false), __read(project_1.defaultPluginManifest), false);
function parseManifestFileOption(manifestFile, defaults) {
    var didUserProvideManifestFile = manifestFile && !!manifestFile.length;
    var manifestPaths = manifestFile ? [manifestFile] : defaults;
    manifestFile = (0, system_1.resolvePathIfExists)(manifestPaths);
    if (!manifestFile) {
        console.error(intl_1.intlMsg.commands_build_error_manifestNotFound({
            paths: manifestPaths.join(", "),
        }));
        process.exit(1);
    }
    var fileName = path_1.default.basename(manifestFile);
    if (!didUserProvideManifestFile &&
        deprecatedDefaultManifests.includes(fileName)) {
        console.warn(intl_1.intlMsg.lib_option_defaults_deprecated_project_manifest({
            fileName: path_1.default.basename(fileName),
        }));
    }
    return manifestFile;
}
exports.parseManifestFileOption = parseManifestFileOption;
//# sourceMappingURL=manifestFile.js.map