"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployer = void 0;
var _1 = require(".");
var __1 = require("..");
var jsonschema_1 = require("jsonschema");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var Deployer = /** @class */ (function () {
    function Deployer(manifest, cache, logger) {
        this._config = {
            logger: logger,
            cache: cache,
            defaultModulesCached: false,
        };
        this.manifest = manifest;
    }
    Deployer.create = function (manifest, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var deployManifest, cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, __1.loadDeployManifest)(manifest, logger)];
                    case 1:
                        deployManifest = _a.sent();
                        cache = new __1.CacheDirectory({
                            rootDir: path_1.default.dirname(manifest),
                            subDir: Deployer.cacheLayout.root,
                        });
                        return [2 /*return*/, new Deployer(deployManifest, cache, logger)];
                }
            });
        });
    };
    Deployer.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var allStepsFromAllJobs, packageNames, packageMapEntries, packageMap, stepToPackageMap, allStepsFromAllJobs_1, allStepsFromAllJobs_1_1, step, jobs;
            var e_1, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        allStepsFromAllJobs = Object.entries(this.manifest.jobs).flatMap(function (_a) {
                            var _b = __read(_a, 2), jobName = _b[0], job = _b[1];
                            return job.steps.map(function (step) { return (__assign({ jobName: jobName }, step)); });
                        });
                        packageNames = __spreadArray([], __read(new Set(allStepsFromAllJobs.map(function (step) { return step.package; }))), false);
                        this._sanitizePackages(packageNames);
                        return [4 /*yield*/, this._cacheDeployModules(packageNames)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, Promise.all(packageNames.map(function (packageName) { return __awaiter(_this, void 0, void 0, function () {
                                var deployerPackage;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._getDeployModule(packageName)];
                                        case 1:
                                            deployerPackage = _a.sent();
                                            return [2 /*return*/, [packageName, deployerPackage]];
                                    }
                                });
                            }); }))];
                    case 2:
                        packageMapEntries = _b.sent();
                        packageMap = Object.fromEntries(packageMapEntries);
                        stepToPackageMap = {};
                        try {
                            for (allStepsFromAllJobs_1 = __values(allStepsFromAllJobs), allStepsFromAllJobs_1_1 = allStepsFromAllJobs_1.next(); !allStepsFromAllJobs_1_1.done; allStepsFromAllJobs_1_1 = allStepsFromAllJobs_1.next()) {
                                step = allStepsFromAllJobs_1_1.value;
                                stepToPackageMap[step.name] = __assign(__assign({}, packageMap[step.package]), { jobName: step.jobName });
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (allStepsFromAllJobs_1_1 && !allStepsFromAllJobs_1_1.done && (_a = allStepsFromAllJobs_1.return)) _a.call(allStepsFromAllJobs_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this._validateManifestWithExts(this.manifest, stepToPackageMap);
                        jobs = Object.entries(this.manifest.jobs).map(function (_a) {
                            var _b;
                            var _c = __read(_a, 2), jobName = _c[0], job = _c[1];
                            var steps = job.steps.map(function (step) {
                                var _a;
                                return new _1.DeployStep({
                                    name: step.name,
                                    uriOrStepResult: step.uri,
                                    deployModule: stepToPackageMap[step.name].deployModule,
                                    config: (_a = step.config) !== null && _a !== void 0 ? _a : {},
                                });
                            });
                            return new _1.DeployJob({
                                name: jobName,
                                steps: steps,
                                config: (_b = job.config) !== null && _b !== void 0 ? _b : {},
                                logger: _this._config.logger,
                            });
                        });
                        return [4 /*yield*/, Promise.all(jobs.map(function (job) { return job.run(); }))];
                    case 3: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Deployer.prototype.getCacheDir = function () {
        return this._config.cache;
    };
    Deployer.prototype._sanitizePackages = function (packages) {
        var unrecognizedPackages = [];
        var availableDeployers = fs_1.default.readdirSync(path_1.default.join(__dirname, "..", "defaults", "deploy-modules"));
        packages.forEach(function (p) {
            if (!availableDeployers.includes(p)) {
                unrecognizedPackages.push(p);
            }
        });
        if (unrecognizedPackages.length) {
            throw new Error("Unrecognized packages: ".concat(unrecognizedPackages.join(", ")));
        }
    };
    Deployer.prototype._getDeployModule = function (moduleName) {
        return __awaiter(this, void 0, void 0, function () {
            var cachePath, manifestExtPath, manifestExt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._config.defaultModulesCached) {
                            throw new Error("Deploy modules have not been cached");
                        }
                        cachePath = this._config.cache.getCachePath("".concat(Deployer.cacheLayout.deployModulesDir, "/").concat(moduleName));
                        manifestExtPath = path_1.default.join(cachePath, "polywrap.deploy.ext.json");
                        return [4 /*yield*/, (0, __1.loadDeployManifestExt)(manifestExtPath, this._config.logger)];
                    case 1:
                        manifestExt = _a.sent();
                        return [2 /*return*/, {
                                // eslint-disable-next-line @typescript-eslint/no-require-imports
                                deployModule: require(cachePath).default,
                                manifestExt: manifestExt,
                            }];
                }
            });
        });
    };
    Deployer.prototype._cacheDeployModules = function (modules) {
        var _a, modules_1, modules_1_1;
        var _b, e_2, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var deployModule, e_2_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (this._config.defaultModulesCached) {
                            return [2 /*return*/];
                        }
                        this._config.cache.removeCacheDir(Deployer.cacheLayout.deployModulesDir);
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 9, 10, 15]);
                        _a = true, modules_1 = __asyncValues(modules);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, modules_1.next()];
                    case 3:
                        if (!(modules_1_1 = _e.sent(), _b = modules_1_1.done, !_b)) return [3 /*break*/, 8];
                        _d = modules_1_1.value;
                        _a = false;
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, , 6, 7]);
                        deployModule = _d;
                        return [4 /*yield*/, this._config.cache.copyIntoCache("".concat(Deployer.cacheLayout.deployModulesDir, "/").concat(deployModule), "".concat(__dirname, "/../defaults/deploy-modules/").concat(deployModule, "/*"), { up: true })];
                    case 5:
                        _e.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        _a = true;
                        return [7 /*endfinally*/];
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _e.trys.push([10, , 13, 14]);
                        if (!(!_a && !_b && (_c = modules_1.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, _c.call(modules_1)];
                    case 11:
                        _e.sent();
                        _e.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15:
                        this._config.defaultModulesCached = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    Deployer.prototype._validateManifestWithExts = function (deployManifest, stepToPackageMap) {
        var errors = Object.entries(stepToPackageMap).flatMap(function (_a) {
            var _b = __read(_a, 2), stepName = _b[0], step = _b[1];
            var jobEntry = Object.entries(deployManifest.jobs).find(function (_a) {
                var _b = __read(_a, 1), jobName = _b[0];
                return jobName === step.jobName;
            });
            var job = jobEntry[1];
            var stepToValidate = job.steps.find(function (s) { return s.name === stepName; });
            return step.manifestExt
                ? (0, jsonschema_1.validate)(__assign(__assign({}, job.config), stepToValidate.config), step.manifestExt).errors
                : [];
        });
        if (errors.length) {
            throw new Error(__spreadArray([
                "Validation errors encountered while sanitizing DeployManifest format ".concat(deployManifest.format)
            ], __read(errors.map(function (error) { return error.toString(); })), false).join("\n"));
        }
    };
    Deployer.cacheLayout = {
        root: "deploy/",
        deployModulesDir: "modules/",
    };
    return Deployer;
}());
exports.Deployer = Deployer;
//# sourceMappingURL=Deployer.js.map