"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestEnvClientConfig = void 0;
var providers_1 = require("./providers");
var lib_1 = require("../../lib");
var client_config_builder_js_1 = require("@polywrap/client-config-builder-js");
var Web3 = __importStar(require("@polywrap/web3-config-bundle-js"));
var Sys = __importStar(require("@polywrap/sys-config-bundle-js"));
var uri_resolver_extensions_js_1 = require("@polywrap/uri-resolver-extensions-js");
var ethereum_wallet_js_1 = require("@polywrap/ethereum-wallet-js");
function getTestEnvClientConfig() {
    var _a, _b, _c;
    // TODO: move this into its own package, since it's being used everywhere?
    // maybe have it exported from test-env.
    var providers = (0, providers_1.getTestEnvProviders)();
    var ipfsProvider = providers.ipfsProvider;
    var ethProvider = providers.ethProvider;
    if (!ipfsProvider || !ethProvider) {
        throw Error("Test environment not found.");
    }
    var ensAddress = lib_1.ETH_ENS_IPFS_MODULE_CONSTANTS.ensAddresses.ensAddress;
    var testnetEnsResolverUri = "proxy/testnet-ens-contenthash-uri-resolver";
    var builder = new client_config_builder_js_1.PolywrapClientConfigBuilder()
        .addDefaults()
        .addEnvs((_a = {},
        _a[Sys.bundle.ipfsResolver.uri] = {
            provider: ipfsProvider,
            retries: { tryResolveUri: 1, getFile: 1 },
        },
        _a[testnetEnsResolverUri] = {
            registryAddress: ensAddress,
        },
        _a))
        .setRedirects((_b = {},
        _b[testnetEnsResolverUri] = Web3.bundle.ensContenthashResolver.uri,
        _b))
        .setPackages((_c = {},
        _c[Web3.bundle.ethereumWallet.uri] = (0, ethereum_wallet_js_1.ethereumWalletPlugin)({
            connections: new ethereum_wallet_js_1.Connections({
                networks: {
                    testnet: new ethereum_wallet_js_1.Connection({
                        provider: ethProvider,
                    }),
                    mainnet: new ethereum_wallet_js_1.Connection({
                        provider: "https://mainnet.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",
                    }),
                    goerli: new ethereum_wallet_js_1.Connection({
                        provider: "https://goerli.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",
                    }),
                },
            }),
        }),
        _c));
    var resolverExtensions = builder.config.interfaces[uri_resolver_extensions_js_1.ExtendableUriResolver.defaultExtInterfaceUris[0].uri];
    builder.addInterfaceImplementations(uri_resolver_extensions_js_1.ExtendableUriResolver.defaultExtInterfaceUris[0].uri, __spreadArray([testnetEnsResolverUri], __read(resolverExtensions), false));
    return builder.config;
}
exports.getTestEnvClientConfig = getTestEnvClientConfig;
//# sourceMappingURL=client-config.js.map