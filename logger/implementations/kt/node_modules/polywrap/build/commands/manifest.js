"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaString = exports.runSchemaCommand = exports.manifest = void 0;
var types_1 = require("./types");
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var manifest_1 = require("../lib/manifest");
var option_defaults_1 = require("../lib/option-defaults");
var polywrap_manifest_types_js_1 = require("@polywrap/polywrap-manifest-types-js");
var json_schema_ref_parser_1 = require("@apidevtools/json-schema-ref-parser");
// Workaround: https://github.com/APIDevTools/json-schema-ref-parser/issues/139#issuecomment-940500698
var json_schema_ref_parser_2 = __importDefault(require("@apidevtools/json-schema-ref-parser"));
json_schema_ref_parser_2.default.dereference = json_schema_ref_parser_2.default.dereference.bind(json_schema_ref_parser_2.default);
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var pathStr = lib_1.intlMsg.commands_manifest_options_m_path();
var formatStr = lib_1.intlMsg.commands_manifest_options_m_format();
var defaultProjectManifestStr = lib_1.defaultPolywrapManifestFiles.join(" | ");
var manifestTypes = [
    "project",
    "build",
    "deploy",
    "infra",
    "workflow",
    "docs",
];
exports.manifest = {
    setup: function (program) {
        var manifestCommand = program
            .command("manifest")
            .alias("m")
            .description(lib_1.intlMsg.commands_manifest_description());
        manifestCommand
            .command("schema")
            .alias("s")
            .description(lib_1.intlMsg.commands_manifest_command_s())
            .addArgument(new types_1.Argument("type", lib_1.intlMsg.commands_manifest_options_t({ default: manifestTypes[0] }))
            .argOptional()
            .choices(manifestTypes)
            .default(manifestTypes[0]))
            .option("-r, --raw", lib_1.intlMsg.commands_manifest_command_s_option_r())
            .option("-m, --manifest-file <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_manifest_options_m({
            default: defaultProjectManifestStr,
        })))
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .option("-l, --log-file [".concat(pathStr, "]"), "".concat(lib_1.intlMsg.commands_build_options_l()))
            .action(function (type, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, exports.runSchemaCommand)(type, {
                            raw: options.raw || false,
                            manifestFile: options.manifestFile || false,
                            verbose: options.verbose || false,
                            quiet: options.quiet || false,
                            logFile: (0, lib_1.parseLogFileOption)(options.logFile),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        manifestCommand
            .command("migrate")
            .alias("m")
            .description(lib_1.intlMsg.commands_manifest_command_m())
            .addArgument(new types_1.Argument("type", lib_1.intlMsg.commands_manifest_options_t({ default: manifestTypes[0] }))
            .argOptional()
            .choices(manifestTypes)
            .default(manifestTypes[0]))
            .option("-m, --manifest-file <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_manifest_options_m({
            default: defaultProjectManifestStr,
        })))
            .option("-f, --format <".concat(formatStr, ">"), "".concat(lib_1.intlMsg.commands_manifest_options_f()))
            .option("-l, --log-file [".concat(pathStr, "]"), "".concat(lib_1.intlMsg.commands_build_options_l()))
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (type, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, runMigrateCommand(type, {
                            manifestFile: options.manifestFile || false,
                            format: options.format || false,
                            verbose: options.verbose || false,
                            quiet: options.quiet || false,
                            logFile: (0, lib_1.parseLogFileOption)(options.logFile),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
var runSchemaCommand = function (type, options) { return __awaiter(void 0, void 0, void 0, function () {
    var verbose, quiet, logFile, logger, manifestFile, schemaStr;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                verbose = options.verbose, quiet = options.quiet, logFile = options.logFile;
                logger = (0, createLogger_1.createLogger)({ verbose: verbose, quiet: quiet, logFile: logFile });
                manifestFile = "";
                switch (type) {
                    case "project":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, option_defaults_1.defaultProjectManifestFiles);
                        break;
                    case "build":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultBuildManifestFiles);
                        break;
                    case "deploy":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultDeployManifestFiles);
                        break;
                    case "infra":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultInfraManifestFiles);
                        break;
                    case "workflow":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultWorkflowManifestFiles);
                        break;
                    case "docs":
                        manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultDocsManifest);
                        break;
                }
                return [4 /*yield*/, (0, exports.getSchemaString)(logger, type, __assign(__assign({}, options), { manifestFile: manifestFile }))];
            case 1:
                schemaStr = _a.sent();
                logger.info(schemaStr);
                return [2 /*return*/];
        }
    });
}); };
exports.runSchemaCommand = runSchemaCommand;
var getSchemaString = function (logger, type, options) { return __awaiter(void 0, void 0, void 0, function () {
    var manifestFile, manifestString, manifestVersion, schemasPackageDir, manifestSchemaFile, language, schemaString, result, schema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manifestFile = options.manifestFile || "";
                manifestString = fs_1.default.existsSync(manifestFile)
                    ? fs_1.default.readFileSync(manifestFile, "utf-8")
                    : undefined;
                manifestVersion = manifestString && (0, lib_1.maybeGetManifestFormatVersion)(manifestString);
                schemasPackageDir = path_1.default.dirname(require.resolve("@polywrap/polywrap-manifest-schemas"));
                manifestSchemaFile = "";
                switch (type) {
                    case "project":
                        language = manifestString && (0, lib_1.getProjectManifestLanguage)(manifestString);
                        if (!language) {
                            language = "wasm/rust";
                        }
                        if ((0, lib_1.isPolywrapManifestLanguage)(language)) {
                            maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.PolywrapManifestFormats), manifestFile, logger);
                            manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.PolywrapManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestPolywrapManifestFormat]);
                        }
                        else if ((0, lib_1.isAppManifestLanguage)(language)) {
                            maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.AppManifestFormats), manifestFile, logger);
                            manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.AppManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestAppManifestFormat]);
                        }
                        else if ((0, lib_1.isPluginManifestLanguage)(language)) {
                            maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.PluginManifestFormats), manifestFile, logger);
                            manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.PluginManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestPluginManifestFormat]);
                        }
                        else {
                            throw new Error("Unsupported project type!");
                        }
                        break;
                    case "build":
                        maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.BuildManifestFormats), manifestFile, logger);
                        manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.BuildManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestBuildManifestFormat]);
                        break;
                    case "deploy":
                        maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.DeployManifestFormats), manifestFile, logger);
                        manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.DeployManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestDeployManifestFormat]);
                        break;
                    case "infra":
                        maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.InfraManifestFormats), manifestFile, logger);
                        manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.InfraManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestInfraManifestFormat]);
                        break;
                    case "workflow":
                        maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.PolywrapWorkflowFormats), manifestFile, logger);
                        manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.PolywrapWorkflowSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestPolywrapWorkflowFormat]);
                        break;
                    case "docs":
                        maybeFailOnUnsupportedManifestFormat(manifestVersion, Object.values(polywrap_manifest_types_js_1.DocsManifestFormats), manifestFile, logger);
                        manifestSchemaFile = path_1.default.join(schemasPackageDir, polywrap_manifest_types_js_1.DocsManifestSchemaFiles[manifestVersion !== null && manifestVersion !== void 0 ? manifestVersion : polywrap_manifest_types_js_1.latestDocsManifestFormat]);
                        break;
                }
                schemaString = fs_1.default.readFileSync(manifestSchemaFile, {
                    encoding: "utf-8",
                });
                if (!options.raw) return [3 /*break*/, 1];
                result = schemaString;
                return [3 /*break*/, 3];
            case 1: return [4 /*yield*/, (0, json_schema_ref_parser_1.dereference)(JSON.parse(schemaString))];
            case 2:
                schema = _a.sent();
                result = (0, manifest_1.getYamlishSchemaForManifestJsonSchemaObject)(schema.properties);
                _a.label = 3;
            case 3: return [2 /*return*/, result];
        }
    });
}); };
exports.getSchemaString = getSchemaString;
var runMigrateCommand = function (type, options) { return __awaiter(void 0, void 0, void 0, function () {
    var verbose, quiet, logFile, logger, manifestFile, manifestString, language;
    return __generator(this, function (_a) {
        verbose = options.verbose, quiet = options.quiet, logFile = options.logFile;
        logger = (0, createLogger_1.createLogger)({ verbose: verbose, quiet: quiet, logFile: logFile });
        manifestFile = "";
        switch (type) {
            case "project":
                manifestFile = (0, lib_1.parseManifestFileOption)(options.manifestFile, option_defaults_1.defaultProjectManifestFiles);
                manifestString = fs_1.default.readFileSync(manifestFile, {
                    encoding: "utf-8",
                });
                language = (0, lib_1.getProjectManifestLanguage)(manifestString);
                if (!language) {
                    logger.info(lib_1.intlMsg.commands_manifest_projectTypeError());
                    process.exit(1);
                }
                if ((0, lib_1.isPolywrapManifestLanguage)(language)) {
                    maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.PolywrapManifestFormats), logger);
                    return [2 /*return*/, migrateManifestFile(manifestFile, manifest_1.migratePolywrapProjectManifest, options.format || polywrap_manifest_types_js_1.latestPolywrapManifestFormat, logger)];
                }
                else if ((0, lib_1.isAppManifestLanguage)(language)) {
                    maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.AppManifestFormats), logger);
                    return [2 /*return*/, migrateManifestFile(manifestFile, manifest_1.migrateAppProjectManifest, options.format || polywrap_manifest_types_js_1.latestAppManifestFormat, logger)];
                }
                else if ((0, lib_1.isPluginManifestLanguage)(language)) {
                    maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.PluginManifestFormats), logger);
                    return [2 /*return*/, migrateManifestFile(manifestFile, manifest_1.migratePluginProjectManifest, options.format || polywrap_manifest_types_js_1.latestPluginManifestFormat, logger)];
                }
                logger.info(lib_1.intlMsg.commands_manifest_projectTypeError());
                process.exit(1);
                break;
            case "build":
                maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.BuildManifestFormats), logger);
                migrateManifestFile((0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultBuildManifestFiles), manifest_1.migrateBuildExtensionManifest, options.format || polywrap_manifest_types_js_1.latestBuildManifestFormat, logger);
                break;
            case "deploy":
                maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.DeployManifestFormats), logger);
                migrateManifestFile((0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultDeployManifestFiles), manifest_1.migrateDeployExtensionManifest, options.format || polywrap_manifest_types_js_1.latestDeployManifestFormat, logger);
                break;
            case "infra":
                maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.InfraManifestFormats), logger);
                migrateManifestFile((0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultInfraManifestFiles), manifest_1.migrateInfraExtensionManifest, options.format || polywrap_manifest_types_js_1.latestInfraManifestFormat, logger);
                break;
            case "workflow":
                maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.PolywrapWorkflowFormats), logger);
                migrateManifestFile((0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultWorkflowManifestFiles), manifest_1.migrateWorkflow, options.format || polywrap_manifest_types_js_1.latestPolywrapWorkflowFormat, logger);
                break;
            case "docs":
                maybeFailOnUnsupportedTargetFormat(options.format, Object.values(polywrap_manifest_types_js_1.DocsManifestFormats), logger);
                migrateManifestFile((0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultDocsManifest), manifest_1.migrateDocsExtensionManifest, options.format || polywrap_manifest_types_js_1.latestDocsManifestFormat, logger);
                break;
        }
        return [2 /*return*/];
    });
}); };
function migrateManifestFile(manifestFile, migrationFn, to, logger) {
    var manifestFileName = path_1.default.basename(manifestFile);
    var manifestFileDir = path_1.default.dirname(manifestFile);
    logger.info(lib_1.intlMsg.commands_manifest_command_m_migrateManifestMessage({
        manifestFile: manifestFileName,
        version: to,
    }));
    var manifestString = fs_1.default.readFileSync(manifestFile, {
        encoding: "utf-8",
    });
    var outputManifestString = migrationFn(manifestString, to, logger);
    // Cache the old manifest file
    var cache = new lib_1.CacheDirectory({
        rootDir: manifestFileDir,
        subDir: "manifest",
    });
    cache.writeCacheFile(manifestFileName, fs_1.default.readFileSync(manifestFile, "utf-8"));
    logger.info(lib_1.intlMsg.commands_manifest_command_m_preserveManifestMessage({
        preservedFilePath: path_1.default.relative(manifestFileDir, cache.getCachePath(manifestFileName)),
    }));
    fs_1.default.writeFileSync(manifestFile, outputManifestString, {
        encoding: "utf-8",
    });
}
function maybeFailOnUnsupportedManifestFormat(format, formats, manifestFile, logger) {
    if (!format) {
        return;
    }
    if (!formats.includes(format)) {
        logger.error(lib_1.intlMsg.commands_manifest_formatError({
            fileName: path_1.default.relative(".", manifestFile),
            values: formats.join(", "),
        }));
        process.exit(1);
    }
}
function maybeFailOnUnsupportedTargetFormat(format, formats, logger) {
    if (!format) {
        return;
    }
    if (!formats.includes(format)) {
        logger.error(lib_1.intlMsg.commands_manifest_migrate_targetFormatError({
            formats: formats.join(", "),
        }));
        process.exit(1);
    }
}
//# sourceMappingURL=manifest.js.map