"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDocsInitCommand = exports.docs = void 0;
var lib_1 = require("../lib");
var manifest_1 = require("./manifest");
var createLogger_1 = require("./utils/createLogger");
var fs_extra_1 = __importDefault(require("fs-extra"));
var pathStr = lib_1.intlMsg.commands_docs_init_m_path();
var defaultManifestStr = lib_1.defaultPolywrapManifestFiles.join(" | ");
exports.docs = {
    setup: function (program) {
        var docsCommand = program
            .command("docs")
            .description(lib_1.intlMsg.commands_docs_description());
        docsCommand
            .command("init")
            .alias("i")
            .description(lib_1.intlMsg.commands_docs_init_description())
            .option("-m, --manifest-file <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_docs_options_m({
            default: defaultManifestStr,
        })))
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .option("-l, --log-file [".concat(pathStr, "]"), "".concat(lib_1.intlMsg.commands_build_options_l()))
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, exports.runDocsInitCommand)({
                            manifestFile: (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultPolywrapManifestFiles),
                            dir: options.dir || false,
                            force: options.force || false,
                            logFile: (0, lib_1.parseLogFileOption)(options.logFile),
                            quiet: options.quiet || false,
                            verbose: options.verbose || false,
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
var runDocsInitCommand = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var verbose, quiet, logFile, manifestFile, logger, docsManifestExists, docsManifest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                verbose = options.verbose, quiet = options.quiet, logFile = options.logFile, manifestFile = options.manifestFile;
                logger = (0, createLogger_1.createLogger)({ verbose: verbose, quiet: quiet, logFile: logFile });
                docsManifestExists = fs_extra_1.default.existsSync(lib_1.defaultDocsManifest[0]);
                if (docsManifestExists) {
                    logger.error(lib_1.intlMsg.commands_docs_init_error_manifest_exists({
                        manifestFile: lib_1.defaultDocsManifest[0],
                    }));
                    process.exit(1);
                }
                return [4 /*yield*/, (0, manifest_1.getSchemaString)(logger, "docs", {
                        verbose: false,
                        quiet: true,
                        logFile: false,
                        raw: false,
                        manifestFile: false,
                    })];
            case 1:
                docsManifest = _a.sent();
                fs_extra_1.default.writeFileSync(lib_1.defaultDocsManifest[0], docsManifest);
                logger.info(lib_1.intlMsg.commands_docs_init_msg_manifest_created({
                    manifestFile: lib_1.defaultDocsManifest[0],
                }));
                logger.warn(lib_1.intlMsg.commands_docs_init_warn_update_manifest({
                    manifestFile: manifestFile,
                    docsManifestFile: lib_1.defaultDocsManifest[0],
                }));
                return [2 /*return*/];
        }
    });
}); };
exports.runDocsInitCommand = runDocsInitCommand;
//# sourceMappingURL=docs.js.map