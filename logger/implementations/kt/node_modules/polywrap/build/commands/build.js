"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var codegen_1 = require("../lib/codegen");
var build_strategies_1 = require("../lib/build-strategies");
var defaults_1 = require("../lib/defaults");
var watchProject_1 = require("../lib/watchProject");
var uri_1 = require("../lib/option-parsers/uri");
var client_js_1 = require("@polywrap/client-js");
var defaultOutputDir = "./build";
var defaultStrategy = build_strategies_1.SupportedStrategies.VM;
var strategyStr = Object.values(build_strategies_1.SupportedStrategies).join(" | ");
var defaultManifestStr = lib_1.defaultPolywrapManifestFiles.join(" | ");
var pathStr = lib_1.intlMsg.commands_build_options_o_path();
var supportedProjectTypes = __spreadArray(__spreadArray([], __read(Object.values(lib_1.polywrapManifestLanguages)), false), __read(Object.values(lib_1.pluginManifestLanguages)), false);
exports.build = {
    setup: function (program) {
        program
            .command("build")
            .alias("b")
            .description(lib_1.intlMsg.commands_build_description())
            .option("-m, --manifest-file <".concat(pathStr, ">"), lib_1.intlMsg.commands_build_options_m({
            default: defaultManifestStr,
        }))
            .option("-o, --output-dir <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_build_options_o({
            default: defaultOutputDir,
        })))
            .option("-b, --bindgen <URI>", "".concat(lib_1.intlMsg.commands_codegen_options_b()))
            .option("-c, --client-config <".concat(lib_1.intlMsg.commands_common_options_configPath(), ">"), "".concat(lib_1.intlMsg.commands_common_options_config()))
            .option("-n, --no-codegen", "".concat(lib_1.intlMsg.commands_build_options_codegen()))
            .option("--codegen-dir", "".concat(lib_1.intlMsg.commands_build_options_codegen_dir({
            default: defaults_1.DEFAULT_CODEGEN_DIR,
        })))
            .option("--wrapper-envs <".concat(lib_1.intlMsg.commands_common_options_wrapperEnvsPath(), ">"), "".concat(lib_1.intlMsg.commands_common_options_wrapperEnvs()))
            .option("-s, --strategy <".concat(strategyStr, ">"), "".concat(lib_1.intlMsg.commands_build_options_s({
            default: defaultStrategy,
        })))
            .option("-w, --watch", "".concat(lib_1.intlMsg.commands_common_options_w()))
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .option("-l, --log-file [".concat(pathStr, "]"), "".concat(lib_1.intlMsg.commands_build_options_l()))
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run({
                            manifestFile: (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultPolywrapManifestFiles),
                            clientConfig: options.clientConfig || false,
                            wrapperEnvs: options.wrapperEnvs || false,
                            outputDir: (0, lib_1.parseDirOption)(options.outputDir, defaultOutputDir),
                            bindgen: options.bindgen || false,
                            noCodegen: !options.codegen || false,
                            codegenDir: (0, lib_1.parseDirOptionNoDefault)(options.codegenDir),
                            strategy: options.strategy || defaultStrategy,
                            watch: options.watch || false,
                            verbose: options.verbose || false,
                            quiet: options.quiet || false,
                            logFile: (0, lib_1.parseLogFileOption)(options.logFile),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function validateManifestModules(polywrapManifest) {
    return __awaiter(this, void 0, void 0, function () {
        var missingModuleMessage, noInterfaceModule;
        return __generator(this, function (_a) {
            if (polywrapManifest.project.type !== "interface" &&
                !polywrapManifest.source.module) {
                missingModuleMessage = lib_1.intlMsg.lib_compiler_missingModule();
                throw Error(missingModuleMessage);
            }
            if (polywrapManifest.project.type === "interface" &&
                polywrapManifest.source.module) {
                noInterfaceModule = lib_1.intlMsg.lib_compiler_noInterfaceModule();
                throw Error(noInterfaceModule);
            }
            return [2 /*return*/];
        });
    });
}
function createBuildStrategy(strategy, outputDir, project) {
    switch (strategy) {
        case build_strategies_1.SupportedStrategies.LOCAL:
            return new build_strategies_1.LocalBuildStrategy({ outputDir: outputDir, project: project });
        case build_strategies_1.SupportedStrategies.IMAGE:
            return new build_strategies_1.DockerImageBuildStrategy({ outputDir: outputDir, project: project });
        case build_strategies_1.SupportedStrategies.VM:
            return new build_strategies_1.DockerVMBuildStrategy({ outputDir: outputDir, project: project });
        default:
            throw Error("Unknown strategy: ".concat(strategy));
    }
}
function run(options) {
    return __awaiter(this, void 0, void 0, function () {
        var watch, manifestFile, clientConfig, wrapperEnvs, outputDir, bindgen, strategy, noCodegen, codegenDir, verbose, quiet, logFile, logger, bindgenUri, envs, configBuilder, client, project, manifest, language, buildStrategy, canRunCodegen, isInterface, execute, result;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    watch = options.watch, manifestFile = options.manifestFile, clientConfig = options.clientConfig, wrapperEnvs = options.wrapperEnvs, outputDir = options.outputDir, bindgen = options.bindgen, strategy = options.strategy, noCodegen = options.noCodegen, codegenDir = options.codegenDir, verbose = options.verbose, quiet = options.quiet, logFile = options.logFile;
                    logger = (0, createLogger_1.createLogger)({ verbose: verbose, quiet: quiet, logFile: logFile });
                    bindgenUri = (0, uri_1.parseUriOption)(bindgen);
                    return [4 /*yield*/, (0, lib_1.parseWrapperEnvsOption)(wrapperEnvs)];
                case 1:
                    envs = _a.sent();
                    return [4 /*yield*/, (0, lib_1.parseClientConfigOption)(clientConfig)];
                case 2:
                    configBuilder = _a.sent();
                    if (envs) {
                        configBuilder.addEnvs(envs);
                    }
                    client = new client_js_1.PolywrapClient(configBuilder.build());
                    return [4 /*yield*/, (0, lib_1.getProjectFromManifest)(manifestFile, logger)];
                case 3:
                    project = _a.sent();
                    if (!project) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, project.validate()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, project.getManifest()];
                case 5:
                    manifest = _a.sent();
                    language = manifest.project.type;
                    if (supportedProjectTypes.indexOf(language) === -1) {
                        logger.error(lib_1.intlMsg.commands_build_error_unsupportedProjectType({
                            supportedTypes: supportedProjectTypes.join(", "),
                        }));
                        process.exit(1);
                    }
                    canRunCodegen = true;
                    if (!(0, lib_1.isPolywrapManifestLanguage)(language)) return [3 /*break*/, 7];
                    return [4 /*yield*/, validateManifestModules(manifest)];
                case 6:
                    _a.sent();
                    isInterface = language === "interface";
                    if (isInterface) {
                        buildStrategy = new build_strategies_1.NoopBuildStrategy({
                            project: project,
                            outputDir: outputDir,
                        });
                    }
                    else {
                        buildStrategy = createBuildStrategy(strategy, outputDir, project);
                    }
                    canRunCodegen = !isInterface;
                    _a.label = 7;
                case 7:
                    execute = function () { return __awaiter(_this, void 0, void 0, function () {
                        var schemaComposer, codeGenerator, codegenSuccess, compiler, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 4, , 5]);
                                    schemaComposer = new lib_1.SchemaComposer({
                                        project: project,
                                        client: client,
                                    });
                                    if (!(canRunCodegen && !noCodegen)) return [3 /*break*/, 2];
                                    codeGenerator = new codegen_1.CodeGenerator({
                                        project: project,
                                        schemaComposer: schemaComposer,
                                        codegenDirAbs: codegenDir || undefined,
                                        bindgenUri: bindgenUri,
                                    });
                                    return [4 /*yield*/, codeGenerator.generate()];
                                case 1:
                                    codegenSuccess = _a.sent();
                                    if (!codegenSuccess) {
                                        logger.error(lib_1.intlMsg.commands_build_error_codegen_failed());
                                        return [2 /*return*/, false];
                                    }
                                    _a.label = 2;
                                case 2:
                                    compiler = new lib_1.Compiler({
                                        project: project,
                                        outputDir: outputDir,
                                        schemaComposer: schemaComposer,
                                        buildStrategy: buildStrategy,
                                    });
                                    return [4 /*yield*/, compiler.compile()];
                                case 3: return [2 /*return*/, _a.sent()];
                                case 4:
                                    err_1 = _a.sent();
                                    logger.error(err_1.message);
                                    return [2 /*return*/, false];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); };
                    if (!!watch) return [3 /*break*/, 9];
                    return [4 /*yield*/, execute()];
                case 8:
                    result = _a.sent();
                    if (!result) {
                        process.exit(1);
                    }
                    process.exit(0);
                    return [3 /*break*/, 11];
                case 9: return [4 /*yield*/, (0, watchProject_1.watchProject)({
                        execute: execute,
                        logger: logger,
                        project: project,
                        ignored: [outputDir + "/**", project.getManifestDir() + "/**/wrap/**"],
                    })];
                case 10:
                    _a.sent();
                    _a.label = 11;
                case 11: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=build.js.map