"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var yaml_1 = __importDefault(require("yaml"));
var defaultManifestStr = lib_1.defaultDeployManifestFiles.join(" | ");
var pathStr = lib_1.intlMsg.commands_deploy_options_o_path();
exports.deploy = {
    setup: function (program) {
        program
            .command("deploy")
            .alias("d")
            .description(lib_1.intlMsg.commands_deploy_description())
            .option("-m, --manifest-file <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_deploy_options_m({
            default: defaultManifestStr,
        })))
            .option("-o, --output-file <".concat(pathStr, ">"), "".concat(lib_1.intlMsg.commands_deploy_options_o()))
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .option("-l, --log-file [".concat(pathStr, "]"), "".concat(lib_1.intlMsg.commands_build_options_l()))
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run({
                            manifestFile: (0, lib_1.parseManifestFileOption)(options.manifestFile, lib_1.defaultDeployManifestFiles),
                            outputFile: options.outputFile || false,
                            verbose: options.verbose || false,
                            quiet: options.quiet || false,
                            logFile: (0, lib_1.parseLogFileOption)(options.logFile),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(options) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestFile, outputFile, verbose, quiet, logFile, logger, deployer, primaryJobName, jobNames, jobResults, primaryJob, deploymentStep, deploymentUri, manifestDir, deploymentFilepath, outputFileExt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    manifestFile = options.manifestFile, outputFile = options.outputFile, verbose = options.verbose, quiet = options.quiet, logFile = options.logFile;
                    logger = (0, createLogger_1.createLogger)({ verbose: verbose, quiet: quiet, logFile: logFile });
                    return [4 /*yield*/, lib_1.Deployer.create(manifestFile, logger)];
                case 1:
                    deployer = _a.sent();
                    primaryJobName = deployer.manifest.primaryJobName;
                    jobNames = Object.keys(deployer.manifest.jobs);
                    if (primaryJobName) {
                        // validate primary job name
                        if (!jobNames.find(function (jobName) { return jobName === primaryJobName; })) {
                            logger.error(lib_1.intlMsg.commands_deploy_error_primaryJobNotFound());
                            process.exit(1);
                        }
                    }
                    else {
                        // default to first job
                        primaryJobName = jobNames[0];
                    }
                    return [4 /*yield*/, deployer.run()];
                case 2:
                    jobResults = _a.sent();
                    primaryJob = jobResults.find(function (job) { return job.name === primaryJobName; });
                    deploymentStep = primaryJob.steps.length - 1;
                    deploymentUri = primaryJob.steps[deploymentStep].result.uri;
                    manifestDir = path_1.default.dirname(manifestFile);
                    deploymentFilepath = path_1.default.join(manifestDir, "URI.txt");
                    fs_1.default.writeFileSync(deploymentFilepath, deploymentUri);
                    logger.info(lib_1.intlMsg.commands_deploy_deployment_written({
                        primaryJobName: primaryJobName,
                        deploymentFilepath: deploymentFilepath,
                    }));
                    // update historic deployment log
                    deployer
                        .getCacheDir()
                        .appendToCacheFile("deploy.log", "".concat(new Date().toISOString(), " ").concat(deploymentUri, "\n"));
                    if (outputFile) {
                        outputFileExt = path_1.default.extname(outputFile).substring(1);
                        if (!outputFileExt)
                            throw new Error("Require output file extension");
                        switch (outputFileExt) {
                            case "yaml":
                            case "yml":
                                fs_1.default.writeFileSync(outputFile, yaml_1.default.stringify(jobResults, null, 2));
                                break;
                            case "json":
                                fs_1.default.writeFileSync(outputFile, JSON.stringify(jobResults, null, 2));
                                break;
                            default:
                                throw new Error(lib_1.intlMsg.commands_test_error_unsupportedOutputFileExt({
                                    outputFileExt: outputFileExt,
                                }));
                        }
                    }
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=deploy.js.map